/*
 ============================================================================
 Module      : TIMER
 File Name   : TIMER.h
 Description : Header file for the AVR TIMER driver
 Author      : AHMED Abdel-Monem El-Askary
 Date        : 16/10/2023
 ============================================================================
 */
#include "std_types.h"
#include "common_macros.h"
#include "TIMER_private.h"
#include "TIMER_config.h"
#include "EXT_Interrupt.h"


#ifndef TIMER_DRIVER_TIMER_H_
#define TIMER_DRIVER_TIMER_H_

/*******************************************************************************
 *                                    TIMER0                                   *
 *******************************************************************************/

/*******************************************************************************
 *                               Types Declaration                             *
 *******************************************************************************/

typedef enum {
	NO0_CLOCK ,
	F0_CPU_CLOCK ,
	F0_CPU_8 ,
	F0_CPU_64 ,
	F0_CPU_256 ,
	F0_CPU_1024 ,
	EIT0_FALLING ,
	EIT0_RAISING
}Timer0_Prescaler;

typedef enum{
	T0_NORMAL_MODE=0,
	T0_PHASECORRECT_MODE,
	T0_CTC_MODE,
	T0_FASTPWM_MODE
}Timer0_Mode;


typedef enum
{
	T0_DISCONNECTED=0,
	T0_TOGGLE,
	T0_NON_INVERTING,
	T0_INVERTING

}OC0_type;

/*******************************************************************************
 *                              Functions Prototypes  TIMER0                      *
 *******************************************************************************/

void TIMER0_Init(Timer0_Mode mode,Timer0_Prescaler scaler);
void TIMER0_OC0Mode(OC0_type mode);
void TIMER0_OV_InterruptEnable(void);
void TIMER0_OV_InterruptDisable(void);
void TIMER0_OC_InterruptEnable(void);
void TIMER0_OC_InterruptDisable(void);


/*******************************************************************************
 *                              Call Back function  TIMER0                      *
 *******************************************************************************/

void TIMER0_OV_SetCallBack(void(*local_fptr)(void));
void TIMER0_OC_SetCallBack(void(*local_fptr)(void));




/*******************************************************************************
 *                                    TIMER2                                    *
 *******************************************************************************/

/*******************************************************************************
 *                               Types Declaration                             *
 *******************************************************************************/

typedef enum {
	NO2_CLOCK ,
	F2_CPU_CLOCK ,
	F2_CPU_8 ,
	F2_CPU_64 ,
	F2_CPU_256 ,
	F2_CPU_1024 ,
	EIT2_FALLING ,
	EIT2_RAISING
}Timer2_Prescaler;


typedef enum{
	T2_NORMAL_MODE=0,
	T2_PHASECORRECT_MODE,
	T2_CTC_MODE,
	T2_FASTPWM_MODE
}Timer2_Mode;


typedef enum
{
	OC0_DISCONNECTED=0,
	OC0_TOGGLE,
	OC0_NON_INVERTING,
	OC0_INVERTING

}OC2_type;

/*******************************************************************************
 *                              Functions Prototypes  TIMER2                      *
 *******************************************************************************/
void TIMER2_Init(Timer2_Mode mode,Timer2_Prescaler scaler);

void TIMER2_OC2Mode(OC2_type mode);
void TIMER2_OV_InterruptEnable(void);
void TIMER2_OV_InterruptDisable(void);
void TIMER2_OC_InterruptEnable(void);
void TIMER2_OC_InterruptDisable(void);

/*******************************************************************************
 *                              Call Back function  TIMER2                     *
 *******************************************************************************/
void TIMER2_OV_SetCallBack(void(*local_fptr)(void));
void TIMER2_OC_SetCallBack(void(*local_fptr)(void));




/*******************************************************************************
 *                                    TIMER1                                       *
 *******************************************************************************/

/*******************************************************************************
 *                               Types Declaration                             *
 *******************************************************************************/

typedef enum {
	NO1_CLOCK ,
	F1_CPU_CLOCK ,
	F1_CPU_8 ,
	F1_CPU_64 ,
	F1_CPU_256 ,
	F1_CPU_1024 ,
	EIT1_FALLING ,
	EIT1_RAISING
}Timer1_Prescaler;

typedef enum
{
	T1_NORMAL_MODE=0,
	T1_CTC_ICR_TOP_MODE,
	T1_CTC_OCRA_TOP_MODE,
	T1_FASTPWM_ICR_TOP_MODE,
	T1_FASTPWM_OCRA_TOP_MODE

}Timer1_type;

typedef enum
{
	OC1A_DISCONNECTED=0,
	OC1A_TOGGLE,
	OC1A_NON_INVERTING,
	OC1A_INVERTING

}OC1A_type;

typedef enum
{
	OC1B_DISCONNECTED=0,
	OC1B_TOGGLE,
	OC1B_NON_INVERTING,
	OC1B_INVERTING

}OC1B_type;




/*******************************************************************************
 *                              Functions Prototypes  TIMER1                      *
 *******************************************************************************/

void Timer1_Init1( Timer1_type mode,Timer1_Prescaler scaler);
void Timer1_OCRA1Mode(OC1A_type oc1a_mode);
void Timer1_OCRB1Mode(OC1B_type oc1b_mode);



void Timer1_OVF_InterruptEnable(void);
void Timer1_OVF_InterruptDisable(void);

void Timer1_OCA_InterruptEnable(void);
void Timer1_OCA_InterruptDisable(void);

void Timer1_OCB_InterruptEnable(void);
void Timer1_OCB_InterruptDisable(void);


/*******************************************************************************
 *                              Call Back function  TIMER1                     *
 *******************************************************************************/
void Timer1_OVF_SetCallBack(void(*LocalFptr)(void));
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void));
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void));


#endif /* TIMER_DRIVER_TIMER_H_ */
