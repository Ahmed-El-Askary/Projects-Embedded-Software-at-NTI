
UART_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000b78  00000bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000e34  00000000  00000000  00000c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000934  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 3a 05 	call	0xa74	; 0xa74 <main>
  7a:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <UART_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void UART_init(const UART_ConfigType * Config_Ptr)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <UART_init+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <UART_init+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9c 83       	std	Y+4, r25	; 0x04
  90:	8b 83       	std	Y+3, r24	; 0x03
	u16 ubrr_value = 0;
  92:	1a 82       	std	Y+2, r1	; 0x02
  94:	19 82       	std	Y+1, r1	; 0x01

	UCSRA = (1<<U2X);
  96:	eb e2       	ldi	r30, 0x2B	; 43
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	80 83       	st	Z, r24


	UCSRB = (1<<RXEN) | (1<<TXEN);
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	80 83       	st	Z, r24

	/************************** UCSRC Description Configuration ************/
	UCSRC = (1<<URSEL);
  a6:	e0 e4       	ldi	r30, 0x40	; 64
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e8       	ldi	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF)|((Config_Ptr->parity)<< 4);
  ae:	a0 e4       	ldi	r26, 0x40	; 64
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e0 e4       	ldi	r30, 0x40	; 64
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	28 2f       	mov	r18, r24
  ba:	2f 7c       	andi	r18, 0xCF	; 207
  bc:	eb 81       	ldd	r30, Y+3	; 0x03
  be:	fc 81       	ldd	r31, Y+4	; 0x04
  c0:	81 81       	ldd	r24, Z+1	; 0x01
  c2:	88 2f       	mov	r24, r24
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	82 95       	swap	r24
  c8:	92 95       	swap	r25
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	98 27       	eor	r25, r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	98 27       	eor	r25, r24
  d2:	82 2b       	or	r24, r18
  d4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7)|((Config_Ptr->stop_bit)<< 3);
  d6:	a0 e4       	ldi	r26, 0x40	; 64
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e0 e4       	ldi	r30, 0x40	; 64
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	28 2f       	mov	r18, r24
  e2:	27 7f       	andi	r18, 0xF7	; 247
  e4:	eb 81       	ldd	r30, Y+3	; 0x03
  e6:	fc 81       	ldd	r31, Y+4	; 0x04
  e8:	82 81       	ldd	r24, Z+2	; 0x02
  ea:	88 2f       	mov	r24, r24
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	82 2b       	or	r24, r18
  fc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9)|((Config_Ptr->bit_data)<< 1);
  fe:	a0 e4       	ldi	r26, 0x40	; 64
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e0 e4       	ldi	r30, 0x40	; 64
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	28 2f       	mov	r18, r24
 10a:	29 7f       	andi	r18, 0xF9	; 249
 10c:	eb 81       	ldd	r30, Y+3	; 0x03
 10e:	fc 81       	ldd	r31, Y+4	; 0x04
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	82 2b       	or	r24, r18
 11c:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (u16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
 11e:	eb 81       	ldd	r30, Y+3	; 0x03
 120:	fc 81       	ldd	r31, Y+4	; 0x04
 122:	83 81       	ldd	r24, Z+3	; 0x03
 124:	94 81       	ldd	r25, Z+4	; 0x04
 126:	cc 01       	movw	r24, r24
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	aa 1f       	adc	r26, r26
 13a:	bb 1f       	adc	r27, r27
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	aa 1f       	adc	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	9c 01       	movw	r18, r24
 146:	ad 01       	movw	r20, r26
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	92 e4       	ldi	r25, 0x42	; 66
 14c:	af e0       	ldi	r26, 0x0F	; 15
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	bc 01       	movw	r22, r24
 152:	cd 01       	movw	r24, r26
 154:	0e 94 98 05 	call	0xb30	; 0xb30 <__udivmodsi4>
 158:	da 01       	movw	r26, r20
 15a:	c9 01       	movw	r24, r18
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 162:	e0 e4       	ldi	r30, 0x40	; 64
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	89 2f       	mov	r24, r25
 16c:	99 27       	eor	r25, r25
 16e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 170:	e9 e2       	ldi	r30, 0x29	; 41
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	80 83       	st	Z, r24
}
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <UART_sendByte>:


void UART_sendByte(const u8 data)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	0f 92       	push	r0
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	89 83       	std	Y+1, r24	; 0x01

	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 192:	eb e2       	ldi	r30, 0x2B	; 43
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 72       	andi	r24, 0x20	; 32
 19e:	90 70       	andi	r25, 0x00	; 0
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	b9 f3       	breq	.-18     	; 0x192 <UART_sendByte+0xc>


	UDR = data;
 1a4:	ec e2       	ldi	r30, 0x2C	; 44
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	80 83       	st	Z, r24
}
 1ac:	0f 90       	pop	r0
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <UART_recieveByte>:


u8 UART_recieveByte(void)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 1bc:	eb e2       	ldi	r30, 0x2B	; 43
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	dc f7       	brge	.-10     	; 0x1bc <UART_recieveByte+0x8>
    return UDR;
 1c6:	ec e2       	ldi	r30, 0x2C	; 44
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
}
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <UART_sendString>:

void UART_sendString(const u8 *Str)
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <UART_sendString+0x6>
 1d8:	0f 92       	push	r0
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	9b 83       	std	Y+3, r25	; 0x03
 1e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
 1e2:	19 82       	std	Y+1, r1	; 0x01
 1e4:	0e c0       	rjmp	.+28     	; 0x202 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	28 2f       	mov	r18, r24
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	9b 81       	ldd	r25, Y+3	; 0x03
 1f0:	fc 01       	movw	r30, r24
 1f2:	e2 0f       	add	r30, r18
 1f4:	f3 1f       	adc	r31, r19
 1f6:	80 81       	ld	r24, Z
 1f8:	0e 94 c3 00 	call	0x186	; 0x186 <UART_sendByte>
		i++;
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	89 83       	std	Y+1, r24	; 0x01

void UART_sendString(const u8 *Str)
{
	u8 i = 0;

	while(Str[i] != '\0')
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	9b 81       	ldd	r25, Y+3	; 0x03
 20c:	fc 01       	movw	r30, r24
 20e:	e2 0f       	add	r30, r18
 210:	f3 1f       	adc	r31, r19
 212:	80 81       	ld	r24, Z
 214:	88 23       	and	r24, r24
 216:	39 f7       	brne	.-50     	; 0x1e6 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <UART_receiveString>:


void UART_receiveString(u8 *Str)
{
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	00 d0       	rcall	.+0      	; 0x22e <UART_receiveString+0xa>
 22e:	0f 92       	push	r0
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	9b 83       	std	Y+3, r25	; 0x03
 236:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
 238:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	8c 01       	movw	r16, r24
 246:	02 0f       	add	r16, r18
 248:	13 1f       	adc	r17, r19
 24a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UART_recieveByte>
 24e:	f8 01       	movw	r30, r16
 250:	80 83       	st	Z, r24
 252:	0f c0       	rjmp	.+30     	; 0x272 <UART_receiveString+0x4e>

	while(Str[i] != '#')
	{
		i++;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	9b 81       	ldd	r25, Y+3	; 0x03
 264:	8c 01       	movw	r16, r24
 266:	02 0f       	add	r16, r18
 268:	13 1f       	adc	r17, r19
 26a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UART_recieveByte>
 26e:	f8 01       	movw	r30, r16
 270:	80 83       	st	Z, r24
{
	u8 i = 0;

	Str[i] = UART_recieveByte();

	while(Str[i] != '#')
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	9b 81       	ldd	r25, Y+3	; 0x03
 27c:	fc 01       	movw	r30, r24
 27e:	e2 0f       	add	r30, r18
 280:	f3 1f       	adc	r31, r19
 282:	80 81       	ld	r24, Z
 284:	83 32       	cpi	r24, 0x23	; 35
 286:	31 f7       	brne	.-52     	; 0x254 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	Str[i] = '\0';
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	9b 81       	ldd	r25, Y+3	; 0x03
 292:	fc 01       	movw	r30, r24
 294:	e2 0f       	add	r30, r18
 296:	f3 1f       	adc	r31, r19
 298:	10 82       	st	Z, r1
}
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	cf 91       	pop	r28
 2a2:	df 91       	pop	r29
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <DIO_setupPinDirection>:
 */

#include "DIO.h"

void DIO_setupPinDirection(u8 port_num , u8 pin_num , DIO_PinDirection direction )
{
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_setupPinDirection+0x6>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <DIO_setupPinDirection+0x8>
 2b2:	0f 92       	push	r0
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	6a 83       	std	Y+2, r22	; 0x02
 2bc:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PORT) || (port_num >= NUM_OF_PORTS))
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <DIO_setupPinDirection+0x1c>
 2c4:	d5 c0       	rjmp	.+426    	; 0x470 <DIO_setupPinDirection+0x1c6>
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <DIO_setupPinDirection+0x24>
 2cc:	d1 c0       	rjmp	.+418    	; 0x470 <DIO_setupPinDirection+0x1c6>
	{

	}
	else
	{
		switch(port_num)
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	3d 83       	std	Y+5, r19	; 0x05
 2d6:	2c 83       	std	Y+4, r18	; 0x04
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	91 05       	cpc	r25, r1
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <DIO_setupPinDirection+0x3a>
 2e2:	43 c0       	rjmp	.+134    	; 0x36a <DIO_setupPinDirection+0xc0>
 2e4:	2c 81       	ldd	r18, Y+4	; 0x04
 2e6:	3d 81       	ldd	r19, Y+5	; 0x05
 2e8:	22 30       	cpi	r18, 0x02	; 2
 2ea:	31 05       	cpc	r19, r1
 2ec:	2c f4       	brge	.+10     	; 0x2f8 <DIO_setupPinDirection+0x4e>
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	9d 81       	ldd	r25, Y+5	; 0x05
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	71 f0       	breq	.+28     	; 0x312 <DIO_setupPinDirection+0x68>
 2f6:	bc c0       	rjmp	.+376    	; 0x470 <DIO_setupPinDirection+0x1c6>
 2f8:	2c 81       	ldd	r18, Y+4	; 0x04
 2fa:	3d 81       	ldd	r19, Y+5	; 0x05
 2fc:	22 30       	cpi	r18, 0x02	; 2
 2fe:	31 05       	cpc	r19, r1
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_setupPinDirection+0x5a>
 302:	5f c0       	rjmp	.+190    	; 0x3c2 <DIO_setupPinDirection+0x118>
 304:	8c 81       	ldd	r24, Y+4	; 0x04
 306:	9d 81       	ldd	r25, Y+5	; 0x05
 308:	83 30       	cpi	r24, 0x03	; 3
 30a:	91 05       	cpc	r25, r1
 30c:	09 f4       	brne	.+2      	; 0x310 <DIO_setupPinDirection+0x66>
 30e:	85 c0       	rjmp	.+266    	; 0x41a <DIO_setupPinDirection+0x170>
 310:	af c0       	rjmp	.+350    	; 0x470 <DIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
 312:	8b 81       	ldd	r24, Y+3	; 0x03
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	a1 f4       	brne	.+40     	; 0x340 <DIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 318:	aa e3       	ldi	r26, 0x3A	; 58
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	ea e3       	ldi	r30, 0x3A	; 58
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	48 2f       	mov	r20, r24
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 2e       	mov	r0, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_setupPinDirection+0x8c>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_setupPinDirection+0x88>
 33a:	84 2b       	or	r24, r20
 33c:	8c 93       	st	X, r24
 33e:	98 c0       	rjmp	.+304    	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 340:	aa e3       	ldi	r26, 0x3A	; 58
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	ea e3       	ldi	r30, 0x3A	; 58
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_setupPinDirection+0xb4>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_setupPinDirection+0xb0>
 362:	80 95       	com	r24
 364:	84 23       	and	r24, r20
 366:	8c 93       	st	X, r24
 368:	83 c0       	rjmp	.+262    	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	a1 f4       	brne	.+40     	; 0x398 <DIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 370:	a7 e3       	ldi	r26, 0x37	; 55
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	e7 e3       	ldi	r30, 0x37	; 55
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 2e       	mov	r0, r18
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_setupPinDirection+0xe4>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	0a 94       	dec	r0
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_setupPinDirection+0xe0>
 392:	84 2b       	or	r24, r20
 394:	8c 93       	st	X, r24
 396:	6c c0       	rjmp	.+216    	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 398:	a7 e3       	ldi	r26, 0x37	; 55
 39a:	b0 e0       	ldi	r27, 0x00	; 0
 39c:	e7 e3       	ldi	r30, 0x37	; 55
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	48 2f       	mov	r20, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	28 2f       	mov	r18, r24
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 2e       	mov	r0, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_setupPinDirection+0x10c>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	0a 94       	dec	r0
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_setupPinDirection+0x108>
 3ba:	80 95       	com	r24
 3bc:	84 23       	and	r24, r20
 3be:	8c 93       	st	X, r24
 3c0:	57 c0       	rjmp	.+174    	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	a1 f4       	brne	.+40     	; 0x3f0 <DIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 3c8:	a4 e3       	ldi	r26, 0x34	; 52
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	e4 e3       	ldi	r30, 0x34	; 52
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	48 2f       	mov	r20, r24
 3d4:	8a 81       	ldd	r24, Y+2	; 0x02
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 2e       	mov	r0, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_setupPinDirection+0x13c>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_setupPinDirection+0x138>
 3ea:	84 2b       	or	r24, r20
 3ec:	8c 93       	st	X, r24
 3ee:	40 c0       	rjmp	.+128    	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 3f0:	a4 e3       	ldi	r26, 0x34	; 52
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e4 e3       	ldi	r30, 0x34	; 52
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	48 2f       	mov	r20, r24
 3fc:	8a 81       	ldd	r24, Y+2	; 0x02
 3fe:	28 2f       	mov	r18, r24
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_setupPinDirection+0x164>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_setupPinDirection+0x160>
 412:	80 95       	com	r24
 414:	84 23       	and	r24, r20
 416:	8c 93       	st	X, r24
 418:	2b c0       	rjmp	.+86     	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	a1 f4       	brne	.+40     	; 0x448 <DIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 420:	a1 e3       	ldi	r26, 0x31	; 49
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e1 e3       	ldi	r30, 0x31	; 49
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	48 2f       	mov	r20, r24
 42c:	8a 81       	ldd	r24, Y+2	; 0x02
 42e:	28 2f       	mov	r18, r24
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 2e       	mov	r0, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_setupPinDirection+0x194>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_setupPinDirection+0x190>
 442:	84 2b       	or	r24, r20
 444:	8c 93       	st	X, r24
 446:	14 c0       	rjmp	.+40     	; 0x470 <DIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 448:	a1 e3       	ldi	r26, 0x31	; 49
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e1 e3       	ldi	r30, 0x31	; 49
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_setupPinDirection+0x1bc>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_setupPinDirection+0x1b8>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	cf 91       	pop	r28
 47c:	df 91       	pop	r29
 47e:	08 95       	ret

00000480 <DIO_writePin>:

void DIO_writePin(u8 port_num , u8 pin_num , u8 value)
{
 480:	df 93       	push	r29
 482:	cf 93       	push	r28
 484:	00 d0       	rcall	.+0      	; 0x486 <DIO_writePin+0x6>
 486:	00 d0       	rcall	.+0      	; 0x488 <DIO_writePin+0x8>
 488:	0f 92       	push	r0
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	89 83       	std	Y+1, r24	; 0x01
 490:	6a 83       	std	Y+2, r22	; 0x02
 492:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PORT) || (port_num >= NUM_OF_PORTS))
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	88 30       	cpi	r24, 0x08	; 8
 498:	08 f0       	brcs	.+2      	; 0x49c <DIO_writePin+0x1c>
 49a:	d5 c0       	rjmp	.+426    	; 0x646 <DIO_writePin+0x1c6>
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	84 30       	cpi	r24, 0x04	; 4
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <DIO_writePin+0x24>
 4a2:	d1 c0       	rjmp	.+418    	; 0x646 <DIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	28 2f       	mov	r18, r24
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	3d 83       	std	Y+5, r19	; 0x05
 4ac:	2c 83       	std	Y+4, r18	; 0x04
 4ae:	8c 81       	ldd	r24, Y+4	; 0x04
 4b0:	9d 81       	ldd	r25, Y+5	; 0x05
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	91 05       	cpc	r25, r1
 4b6:	09 f4       	brne	.+2      	; 0x4ba <DIO_writePin+0x3a>
 4b8:	43 c0       	rjmp	.+134    	; 0x540 <DIO_writePin+0xc0>
 4ba:	2c 81       	ldd	r18, Y+4	; 0x04
 4bc:	3d 81       	ldd	r19, Y+5	; 0x05
 4be:	22 30       	cpi	r18, 0x02	; 2
 4c0:	31 05       	cpc	r19, r1
 4c2:	2c f4       	brge	.+10     	; 0x4ce <DIO_writePin+0x4e>
 4c4:	8c 81       	ldd	r24, Y+4	; 0x04
 4c6:	9d 81       	ldd	r25, Y+5	; 0x05
 4c8:	00 97       	sbiw	r24, 0x00	; 0
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <DIO_writePin+0x68>
 4cc:	bc c0       	rjmp	.+376    	; 0x646 <DIO_writePin+0x1c6>
 4ce:	2c 81       	ldd	r18, Y+4	; 0x04
 4d0:	3d 81       	ldd	r19, Y+5	; 0x05
 4d2:	22 30       	cpi	r18, 0x02	; 2
 4d4:	31 05       	cpc	r19, r1
 4d6:	09 f4       	brne	.+2      	; 0x4da <DIO_writePin+0x5a>
 4d8:	5f c0       	rjmp	.+190    	; 0x598 <DIO_writePin+0x118>
 4da:	8c 81       	ldd	r24, Y+4	; 0x04
 4dc:	9d 81       	ldd	r25, Y+5	; 0x05
 4de:	83 30       	cpi	r24, 0x03	; 3
 4e0:	91 05       	cpc	r25, r1
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <DIO_writePin+0x66>
 4e4:	85 c0       	rjmp	.+266    	; 0x5f0 <DIO_writePin+0x170>
 4e6:	af c0       	rjmp	.+350    	; 0x646 <DIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_HIGH)
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	a1 f4       	brne	.+40     	; 0x516 <DIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 4ee:	ab e3       	ldi	r26, 0x3B	; 59
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	eb e3       	ldi	r30, 0x3B	; 59
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_writePin+0x8c>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_writePin+0x88>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
 514:	98 c0       	rjmp	.+304    	; 0x646 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 516:	ab e3       	ldi	r26, 0x3B	; 59
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	eb e3       	ldi	r30, 0x3B	; 59
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_writePin+0xb4>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_writePin+0xb0>
 538:	80 95       	com	r24
 53a:	84 23       	and	r24, r20
 53c:	8c 93       	st	X, r24
 53e:	83 c0       	rjmp	.+262    	; 0x646 <DIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH)
 540:	8b 81       	ldd	r24, Y+3	; 0x03
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	a1 f4       	brne	.+40     	; 0x56e <DIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 546:	a8 e3       	ldi	r26, 0x38	; 56
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e8 e3       	ldi	r30, 0x38	; 56
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	48 2f       	mov	r20, r24
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 2e       	mov	r0, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_writePin+0xe4>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_writePin+0xe0>
 568:	84 2b       	or	r24, r20
 56a:	8c 93       	st	X, r24
 56c:	6c c0       	rjmp	.+216    	; 0x646 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 56e:	a8 e3       	ldi	r26, 0x38	; 56
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e8 e3       	ldi	r30, 0x38	; 56
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	48 2f       	mov	r20, r24
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_writePin+0x10c>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_writePin+0x108>
 590:	80 95       	com	r24
 592:	84 23       	and	r24, r20
 594:	8c 93       	st	X, r24
 596:	57 c0       	rjmp	.+174    	; 0x646 <DIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH)
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	a1 f4       	brne	.+40     	; 0x5c6 <DIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 59e:	a5 e3       	ldi	r26, 0x35	; 53
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	e5 e3       	ldi	r30, 0x35	; 53
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	48 2f       	mov	r20, r24
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	28 2f       	mov	r18, r24
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 2e       	mov	r0, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_writePin+0x13c>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	0a 94       	dec	r0
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_writePin+0x138>
 5c0:	84 2b       	or	r24, r20
 5c2:	8c 93       	st	X, r24
 5c4:	40 c0       	rjmp	.+128    	; 0x646 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 5c6:	a5 e3       	ldi	r26, 0x35	; 53
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	e5 e3       	ldi	r30, 0x35	; 53
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	48 2f       	mov	r20, r24
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	28 2f       	mov	r18, r24
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 2e       	mov	r0, r18
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_writePin+0x164>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_writePin+0x160>
 5e8:	80 95       	com	r24
 5ea:	84 23       	and	r24, r20
 5ec:	8c 93       	st	X, r24
 5ee:	2b c0       	rjmp	.+86     	; 0x646 <DIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH)
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	81 30       	cpi	r24, 0x01	; 1
 5f4:	a1 f4       	brne	.+40     	; 0x61e <DIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 5f6:	a2 e3       	ldi	r26, 0x32	; 50
 5f8:	b0 e0       	ldi	r27, 0x00	; 0
 5fa:	e2 e3       	ldi	r30, 0x32	; 50
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	48 2f       	mov	r20, r24
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	28 2f       	mov	r18, r24
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 2e       	mov	r0, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_writePin+0x194>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	0a 94       	dec	r0
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_writePin+0x190>
 618:	84 2b       	or	r24, r20
 61a:	8c 93       	st	X, r24
 61c:	14 c0       	rjmp	.+40     	; 0x646 <DIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 61e:	a2 e3       	ldi	r26, 0x32	; 50
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e2 e3       	ldi	r30, 0x32	; 50
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 2e       	mov	r0, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_writePin+0x1bc>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_writePin+0x1b8>
 640:	80 95       	com	r24
 642:	84 23       	and	r24, r20
 644:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	0f 90       	pop	r0
 650:	cf 91       	pop	r28
 652:	df 91       	pop	r29
 654:	08 95       	ret

00000656 <DIO_readPin>:
u8   DIO_readPin (u8 port_num , u8 pin_num)
{
 656:	df 93       	push	r29
 658:	cf 93       	push	r28
 65a:	00 d0       	rcall	.+0      	; 0x65c <DIO_readPin+0x6>
 65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_readPin+0x8>
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	8a 83       	std	Y+2, r24	; 0x02
 666:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW ;
 668:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PORT) || (port_num >= NUM_OF_PORTS))
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	88 30       	cpi	r24, 0x08	; 8
 66e:	08 f0       	brcs	.+2      	; 0x672 <DIO_readPin+0x1c>
 670:	84 c0       	rjmp	.+264    	; 0x77a <DIO_readPin+0x124>
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	84 30       	cpi	r24, 0x04	; 4
 676:	08 f0       	brcs	.+2      	; 0x67a <DIO_readPin+0x24>
 678:	80 c0       	rjmp	.+256    	; 0x77a <DIO_readPin+0x124>
	{
	}
	else
	{
		switch(port_num)
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	3d 83       	std	Y+5, r19	; 0x05
 682:	2c 83       	std	Y+4, r18	; 0x04
 684:	4c 81       	ldd	r20, Y+4	; 0x04
 686:	5d 81       	ldd	r21, Y+5	; 0x05
 688:	41 30       	cpi	r20, 0x01	; 1
 68a:	51 05       	cpc	r21, r1
 68c:	79 f1       	breq	.+94     	; 0x6ec <DIO_readPin+0x96>
 68e:	8c 81       	ldd	r24, Y+4	; 0x04
 690:	9d 81       	ldd	r25, Y+5	; 0x05
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	91 05       	cpc	r25, r1
 696:	34 f4       	brge	.+12     	; 0x6a4 <DIO_readPin+0x4e>
 698:	2c 81       	ldd	r18, Y+4	; 0x04
 69a:	3d 81       	ldd	r19, Y+5	; 0x05
 69c:	21 15       	cp	r18, r1
 69e:	31 05       	cpc	r19, r1
 6a0:	69 f0       	breq	.+26     	; 0x6bc <DIO_readPin+0x66>
 6a2:	6b c0       	rjmp	.+214    	; 0x77a <DIO_readPin+0x124>
 6a4:	4c 81       	ldd	r20, Y+4	; 0x04
 6a6:	5d 81       	ldd	r21, Y+5	; 0x05
 6a8:	42 30       	cpi	r20, 0x02	; 2
 6aa:	51 05       	cpc	r21, r1
 6ac:	b9 f1       	breq	.+110    	; 0x71c <DIO_readPin+0xc6>
 6ae:	8c 81       	ldd	r24, Y+4	; 0x04
 6b0:	9d 81       	ldd	r25, Y+5	; 0x05
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	91 05       	cpc	r25, r1
 6b6:	09 f4       	brne	.+2      	; 0x6ba <DIO_readPin+0x64>
 6b8:	49 c0       	rjmp	.+146    	; 0x74c <DIO_readPin+0xf6>
 6ba:	5f c0       	rjmp	.+190    	; 0x77a <DIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 6bc:	e9 e3       	ldi	r30, 0x39	; 57
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	28 2f       	mov	r18, r24
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	88 2f       	mov	r24, r24
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	a9 01       	movw	r20, r18
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_readPin+0x7e>
 6d0:	55 95       	asr	r21
 6d2:	47 95       	ror	r20
 6d4:	8a 95       	dec	r24
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_readPin+0x7a>
 6d8:	ca 01       	movw	r24, r20
 6da:	81 70       	andi	r24, 0x01	; 1
 6dc:	90 70       	andi	r25, 0x00	; 0
 6de:	88 23       	and	r24, r24
 6e0:	19 f0       	breq	.+6      	; 0x6e8 <DIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	89 83       	std	Y+1, r24	; 0x01
 6e6:	49 c0       	rjmp	.+146    	; 0x77a <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 6e8:	19 82       	std	Y+1, r1	; 0x01
 6ea:	47 c0       	rjmp	.+142    	; 0x77a <DIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 6ec:	e6 e3       	ldi	r30, 0x36	; 54
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	28 2f       	mov	r18, r24
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
 6f8:	88 2f       	mov	r24, r24
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	a9 01       	movw	r20, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_readPin+0xae>
 700:	55 95       	asr	r21
 702:	47 95       	ror	r20
 704:	8a 95       	dec	r24
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_readPin+0xaa>
 708:	ca 01       	movw	r24, r20
 70a:	81 70       	andi	r24, 0x01	; 1
 70c:	90 70       	andi	r25, 0x00	; 0
 70e:	88 23       	and	r24, r24
 710:	19 f0       	breq	.+6      	; 0x718 <DIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	31 c0       	rjmp	.+98     	; 0x77a <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 718:	19 82       	std	Y+1, r1	; 0x01
 71a:	2f c0       	rjmp	.+94     	; 0x77a <DIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 71c:	e3 e3       	ldi	r30, 0x33	; 51
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	28 2f       	mov	r18, r24
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	88 2f       	mov	r24, r24
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	a9 01       	movw	r20, r18
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_readPin+0xde>
 730:	55 95       	asr	r21
 732:	47 95       	ror	r20
 734:	8a 95       	dec	r24
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_readPin+0xda>
 738:	ca 01       	movw	r24, r20
 73a:	81 70       	andi	r24, 0x01	; 1
 73c:	90 70       	andi	r25, 0x00	; 0
 73e:	88 23       	and	r24, r24
 740:	19 f0       	breq	.+6      	; 0x748 <DIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	19 c0       	rjmp	.+50     	; 0x77a <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 748:	19 82       	std	Y+1, r1	; 0x01
 74a:	17 c0       	rjmp	.+46     	; 0x77a <DIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 74c:	e0 e3       	ldi	r30, 0x30	; 48
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	8b 81       	ldd	r24, Y+3	; 0x03
 758:	88 2f       	mov	r24, r24
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	a9 01       	movw	r20, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_readPin+0x10e>
 760:	55 95       	asr	r21
 762:	47 95       	ror	r20
 764:	8a 95       	dec	r24
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_readPin+0x10a>
 768:	ca 01       	movw	r24, r20
 76a:	81 70       	andi	r24, 0x01	; 1
 76c:	90 70       	andi	r25, 0x00	; 0
 76e:	88 23       	and	r24, r24
 770:	19 f0       	breq	.+6      	; 0x778 <DIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	01 c0       	rjmp	.+2      	; 0x77a <DIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 778:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value ;
 77a:	89 81       	ldd	r24, Y+1	; 0x01

}
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	cf 91       	pop	r28
 788:	df 91       	pop	r29
 78a:	08 95       	ret

0000078c <DIO_setupPortDirection>:




void DIO_setupPortDirection(u8 port_num , DIO_PortDirection direction )
{
 78c:	df 93       	push	r29
 78e:	cf 93       	push	r28
 790:	00 d0       	rcall	.+0      	; 0x792 <DIO_setupPortDirection+0x6>
 792:	00 d0       	rcall	.+0      	; 0x794 <DIO_setupPortDirection+0x8>
 794:	cd b7       	in	r28, 0x3d	; 61
 796:	de b7       	in	r29, 0x3e	; 62
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	6a 83       	std	Y+2, r22	; 0x02

	if (port_num >= NUM_OF_PORTS)
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	84 30       	cpi	r24, 0x04	; 4
 7a0:	90 f5       	brcc	.+100    	; 0x806 <DIO_setupPortDirection+0x7a>
	{

	}
	else
	{
		switch (port_num)
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	3c 83       	std	Y+4, r19	; 0x04
 7aa:	2b 83       	std	Y+3, r18	; 0x03
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	9c 81       	ldd	r25, Y+4	; 0x04
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	91 05       	cpc	r25, r1
 7b4:	d1 f0       	breq	.+52     	; 0x7ea <DIO_setupPortDirection+0x5e>
 7b6:	2b 81       	ldd	r18, Y+3	; 0x03
 7b8:	3c 81       	ldd	r19, Y+4	; 0x04
 7ba:	22 30       	cpi	r18, 0x02	; 2
 7bc:	31 05       	cpc	r19, r1
 7be:	2c f4       	brge	.+10     	; 0x7ca <DIO_setupPortDirection+0x3e>
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	9c 81       	ldd	r25, Y+4	; 0x04
 7c4:	00 97       	sbiw	r24, 0x00	; 0
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <DIO_setupPortDirection+0x54>
 7c8:	1e c0       	rjmp	.+60     	; 0x806 <DIO_setupPortDirection+0x7a>
 7ca:	2b 81       	ldd	r18, Y+3	; 0x03
 7cc:	3c 81       	ldd	r19, Y+4	; 0x04
 7ce:	22 30       	cpi	r18, 0x02	; 2
 7d0:	31 05       	cpc	r19, r1
 7d2:	81 f0       	breq	.+32     	; 0x7f4 <DIO_setupPortDirection+0x68>
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	9c 81       	ldd	r25, Y+4	; 0x04
 7d8:	83 30       	cpi	r24, 0x03	; 3
 7da:	91 05       	cpc	r25, r1
 7dc:	81 f0       	breq	.+32     	; 0x7fe <DIO_setupPortDirection+0x72>
 7de:	13 c0       	rjmp	.+38     	; 0x806 <DIO_setupPortDirection+0x7a>
		{
		case PORTA_ID :
			DDRA = direction ;
 7e0:	ea e3       	ldi	r30, 0x3A	; 58
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	80 83       	st	Z, r24
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <DIO_setupPortDirection+0x7a>
			break ;
		case PORTB_ID :
			DDRB = direction ;
 7ea:	e7 e3       	ldi	r30, 0x37	; 55
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	8a 81       	ldd	r24, Y+2	; 0x02
 7f0:	80 83       	st	Z, r24
 7f2:	09 c0       	rjmp	.+18     	; 0x806 <DIO_setupPortDirection+0x7a>
			break ;
		case PORTC_ID :
			DDRC = direction ;
 7f4:	e4 e3       	ldi	r30, 0x34	; 52
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	8a 81       	ldd	r24, Y+2	; 0x02
 7fa:	80 83       	st	Z, r24
 7fc:	04 c0       	rjmp	.+8      	; 0x806 <DIO_setupPortDirection+0x7a>
			break ;
		case PORTD_ID :
			DDRD = direction ;
 7fe:	e1 e3       	ldi	r30, 0x31	; 49
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	80 83       	st	Z, r24
			break ;
		}
	}
}
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	cf 91       	pop	r28
 810:	df 91       	pop	r29
 812:	08 95       	ret

00000814 <DIO_writePort>:

void DIO_writePort(u8 port_num , u8 value)
{
 814:	df 93       	push	r29
 816:	cf 93       	push	r28
 818:	00 d0       	rcall	.+0      	; 0x81a <DIO_writePort+0x6>
 81a:	00 d0       	rcall	.+0      	; 0x81c <DIO_writePort+0x8>
 81c:	cd b7       	in	r28, 0x3d	; 61
 81e:	de b7       	in	r29, 0x3e	; 62
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	84 30       	cpi	r24, 0x04	; 4
 828:	90 f5       	brcc	.+100    	; 0x88e <__stack+0x2f>
	{
	}
	else
	{
		switch(port_num)
 82a:	89 81       	ldd	r24, Y+1	; 0x01
 82c:	28 2f       	mov	r18, r24
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	3c 83       	std	Y+4, r19	; 0x04
 832:	2b 83       	std	Y+3, r18	; 0x03
 834:	8b 81       	ldd	r24, Y+3	; 0x03
 836:	9c 81       	ldd	r25, Y+4	; 0x04
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	91 05       	cpc	r25, r1
 83c:	d1 f0       	breq	.+52     	; 0x872 <__stack+0x13>
 83e:	2b 81       	ldd	r18, Y+3	; 0x03
 840:	3c 81       	ldd	r19, Y+4	; 0x04
 842:	22 30       	cpi	r18, 0x02	; 2
 844:	31 05       	cpc	r19, r1
 846:	2c f4       	brge	.+10     	; 0x852 <DIO_writePort+0x3e>
 848:	8b 81       	ldd	r24, Y+3	; 0x03
 84a:	9c 81       	ldd	r25, Y+4	; 0x04
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	61 f0       	breq	.+24     	; 0x868 <__stack+0x9>
 850:	1e c0       	rjmp	.+60     	; 0x88e <__stack+0x2f>
 852:	2b 81       	ldd	r18, Y+3	; 0x03
 854:	3c 81       	ldd	r19, Y+4	; 0x04
 856:	22 30       	cpi	r18, 0x02	; 2
 858:	31 05       	cpc	r19, r1
 85a:	81 f0       	breq	.+32     	; 0x87c <__stack+0x1d>
 85c:	8b 81       	ldd	r24, Y+3	; 0x03
 85e:	9c 81       	ldd	r25, Y+4	; 0x04
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	91 05       	cpc	r25, r1
 864:	81 f0       	breq	.+32     	; 0x886 <__stack+0x27>
 866:	13 c0       	rjmp	.+38     	; 0x88e <__stack+0x2f>
		{
		case PORTA_ID:
			PORTA = value;
 868:	eb e3       	ldi	r30, 0x3B	; 59
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	8a 81       	ldd	r24, Y+2	; 0x02
 86e:	80 83       	st	Z, r24
 870:	0e c0       	rjmp	.+28     	; 0x88e <__stack+0x2f>
			break;
		case PORTB_ID:
			PORTB = value;
 872:	e8 e3       	ldi	r30, 0x38	; 56
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	8a 81       	ldd	r24, Y+2	; 0x02
 878:	80 83       	st	Z, r24
 87a:	09 c0       	rjmp	.+18     	; 0x88e <__stack+0x2f>
			break;
		case PORTC_ID:
			PORTC = value;
 87c:	e5 e3       	ldi	r30, 0x35	; 53
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	80 83       	st	Z, r24
 884:	04 c0       	rjmp	.+8      	; 0x88e <__stack+0x2f>
			break;
		case PORTD_ID:
			PORTD = value;
 886:	e2 e3       	ldi	r30, 0x32	; 50
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	80 83       	st	Z, r24
			break;
		}
	}
}
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <DIO_readPort>:


u8   DIO_readPort (u8 port_num , u8 pin_num)
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <DIO_readPort+0x6>
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <DIO_readPort+0x8>
 8a4:	0f 92       	push	r0
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
 8aa:	8a 83       	std	Y+2, r24	; 0x02
 8ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = LOGIC_LOW ;
 8ae:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	84 30       	cpi	r24, 0x04	; 4
 8b4:	90 f5       	brcc	.+100    	; 0x91a <DIO_readPort+0x7e>
	{
	}
	else
	{
		switch(port_num)
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	28 2f       	mov	r18, r24
 8ba:	30 e0       	ldi	r19, 0x00	; 0
 8bc:	3d 83       	std	Y+5, r19	; 0x05
 8be:	2c 83       	std	Y+4, r18	; 0x04
 8c0:	8c 81       	ldd	r24, Y+4	; 0x04
 8c2:	9d 81       	ldd	r25, Y+5	; 0x05
 8c4:	81 30       	cpi	r24, 0x01	; 1
 8c6:	91 05       	cpc	r25, r1
 8c8:	d1 f0       	breq	.+52     	; 0x8fe <DIO_readPort+0x62>
 8ca:	2c 81       	ldd	r18, Y+4	; 0x04
 8cc:	3d 81       	ldd	r19, Y+5	; 0x05
 8ce:	22 30       	cpi	r18, 0x02	; 2
 8d0:	31 05       	cpc	r19, r1
 8d2:	2c f4       	brge	.+10     	; 0x8de <DIO_readPort+0x42>
 8d4:	8c 81       	ldd	r24, Y+4	; 0x04
 8d6:	9d 81       	ldd	r25, Y+5	; 0x05
 8d8:	00 97       	sbiw	r24, 0x00	; 0
 8da:	61 f0       	breq	.+24     	; 0x8f4 <DIO_readPort+0x58>
 8dc:	1e c0       	rjmp	.+60     	; 0x91a <DIO_readPort+0x7e>
 8de:	2c 81       	ldd	r18, Y+4	; 0x04
 8e0:	3d 81       	ldd	r19, Y+5	; 0x05
 8e2:	22 30       	cpi	r18, 0x02	; 2
 8e4:	31 05       	cpc	r19, r1
 8e6:	81 f0       	breq	.+32     	; 0x908 <DIO_readPort+0x6c>
 8e8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ea:	9d 81       	ldd	r25, Y+5	; 0x05
 8ec:	83 30       	cpi	r24, 0x03	; 3
 8ee:	91 05       	cpc	r25, r1
 8f0:	81 f0       	breq	.+32     	; 0x912 <DIO_readPort+0x76>
 8f2:	13 c0       	rjmp	.+38     	; 0x91a <DIO_readPort+0x7e>
		{
		case PORTA_ID:
			value = PINA;
 8f4:	e9 e3       	ldi	r30, 0x39	; 57
 8f6:	f0 e0       	ldi	r31, 0x00	; 0
 8f8:	80 81       	ld	r24, Z
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	0e c0       	rjmp	.+28     	; 0x91a <DIO_readPort+0x7e>
			break;
		case PORTB_ID:
			value = PINB;
 8fe:	e6 e3       	ldi	r30, 0x36	; 54
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	80 81       	ld	r24, Z
 904:	89 83       	std	Y+1, r24	; 0x01
 906:	09 c0       	rjmp	.+18     	; 0x91a <DIO_readPort+0x7e>
			break;
		case PORTC_ID:
			value = PINC;
 908:	e3 e3       	ldi	r30, 0x33	; 51
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	80 81       	ld	r24, Z
 90e:	89 83       	std	Y+1, r24	; 0x01
 910:	04 c0       	rjmp	.+8      	; 0x91a <DIO_readPort+0x7e>
			break;
		case PORTD_ID:
			value = PIND;
 912:	e0 e3       	ldi	r30, 0x30	; 48
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 91a:	89 81       	ldd	r24, Y+1	; 0x01
}
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	0f 90       	pop	r0
 922:	0f 90       	pop	r0
 924:	0f 90       	pop	r0
 926:	cf 91       	pop	r28
 928:	df 91       	pop	r29
 92a:	08 95       	ret

0000092c <isequal>:
 */
#include "UART.h"
#include "DIO.h"

u8 isequal (u8 *str)
{
 92c:	df 93       	push	r29
 92e:	cf 93       	push	r28
 930:	cd b7       	in	r28, 0x3d	; 61
 932:	de b7       	in	r29, 0x3e	; 62
 934:	6e 97       	sbiw	r28, 0x1e	; 30
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	9b 8b       	std	Y+19, r25	; 0x13
 942:	8a 8b       	std	Y+18, r24	; 0x12
	u8 open[]  = "open" ;
 944:	ce 01       	movw	r24, r28
 946:	06 96       	adiw	r24, 0x06	; 6
 948:	9e 8b       	std	Y+22, r25	; 0x16
 94a:	8d 8b       	std	Y+21, r24	; 0x15
 94c:	e0 e6       	ldi	r30, 0x60	; 96
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	f8 8f       	std	Y+24, r31	; 0x18
 952:	ef 8b       	std	Y+23, r30	; 0x17
 954:	f5 e0       	ldi	r31, 0x05	; 5
 956:	f9 8f       	std	Y+25, r31	; 0x19
 958:	ef 89       	ldd	r30, Y+23	; 0x17
 95a:	f8 8d       	ldd	r31, Y+24	; 0x18
 95c:	00 80       	ld	r0, Z
 95e:	8f 89       	ldd	r24, Y+23	; 0x17
 960:	98 8d       	ldd	r25, Y+24	; 0x18
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	98 8f       	std	Y+24, r25	; 0x18
 966:	8f 8b       	std	Y+23, r24	; 0x17
 968:	ed 89       	ldd	r30, Y+21	; 0x15
 96a:	fe 89       	ldd	r31, Y+22	; 0x16
 96c:	00 82       	st	Z, r0
 96e:	8d 89       	ldd	r24, Y+21	; 0x15
 970:	9e 89       	ldd	r25, Y+22	; 0x16
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	9e 8b       	std	Y+22, r25	; 0x16
 976:	8d 8b       	std	Y+21, r24	; 0x15
 978:	99 8d       	ldd	r25, Y+25	; 0x19
 97a:	91 50       	subi	r25, 0x01	; 1
 97c:	99 8f       	std	Y+25, r25	; 0x19
 97e:	e9 8d       	ldd	r30, Y+25	; 0x19
 980:	ee 23       	and	r30, r30
 982:	51 f7       	brne	.-44     	; 0x958 <isequal+0x2c>
	u8 closed[]  = "closed" ;
 984:	ce 01       	movw	r24, r28
 986:	0b 96       	adiw	r24, 0x0b	; 11
 988:	9b 8f       	std	Y+27, r25	; 0x1b
 98a:	8a 8f       	std	Y+26, r24	; 0x1a
 98c:	e5 e6       	ldi	r30, 0x65	; 101
 98e:	f0 e0       	ldi	r31, 0x00	; 0
 990:	fd 8f       	std	Y+29, r31	; 0x1d
 992:	ec 8f       	std	Y+28, r30	; 0x1c
 994:	f7 e0       	ldi	r31, 0x07	; 7
 996:	fe 8f       	std	Y+30, r31	; 0x1e
 998:	ec 8d       	ldd	r30, Y+28	; 0x1c
 99a:	fd 8d       	ldd	r31, Y+29	; 0x1d
 99c:	00 80       	ld	r0, Z
 99e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 9a0:	9d 8d       	ldd	r25, Y+29	; 0x1d
 9a2:	01 96       	adiw	r24, 0x01	; 1
 9a4:	9d 8f       	std	Y+29, r25	; 0x1d
 9a6:	8c 8f       	std	Y+28, r24	; 0x1c
 9a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
 9aa:	fb 8d       	ldd	r31, Y+27	; 0x1b
 9ac:	00 82       	st	Z, r0
 9ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
 9b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
 9b2:	01 96       	adiw	r24, 0x01	; 1
 9b4:	9b 8f       	std	Y+27, r25	; 0x1b
 9b6:	8a 8f       	std	Y+26, r24	; 0x1a
 9b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 9ba:	91 50       	subi	r25, 0x01	; 1
 9bc:	9e 8f       	std	Y+30, r25	; 0x1e
 9be:	ee 8d       	ldd	r30, Y+30	; 0x1e
 9c0:	ee 23       	and	r30, r30
 9c2:	51 f7       	brne	.-44     	; 0x998 <isequal+0x6c>

	u8 flag  = 0 ;
 9c4:	1d 82       	std	Y+5, r1	; 0x05
	for (int i = 0 ; i < 4 ; i++)
 9c6:	1c 82       	std	Y+4, r1	; 0x04
 9c8:	1b 82       	std	Y+3, r1	; 0x03
 9ca:	20 c0       	rjmp	.+64     	; 0xa0c <isequal+0xe0>
	{
		if ( str[i] != open[i] )
 9cc:	2b 81       	ldd	r18, Y+3	; 0x03
 9ce:	3c 81       	ldd	r19, Y+4	; 0x04
 9d0:	8a 89       	ldd	r24, Y+18	; 0x12
 9d2:	9b 89       	ldd	r25, Y+19	; 0x13
 9d4:	fc 01       	movw	r30, r24
 9d6:	e2 0f       	add	r30, r18
 9d8:	f3 1f       	adc	r31, r19
 9da:	40 81       	ld	r20, Z
 9dc:	2b 81       	ldd	r18, Y+3	; 0x03
 9de:	3c 81       	ldd	r19, Y+4	; 0x04
 9e0:	ce 01       	movw	r24, r28
 9e2:	06 96       	adiw	r24, 0x06	; 6
 9e4:	fc 01       	movw	r30, r24
 9e6:	e2 0f       	add	r30, r18
 9e8:	f3 1f       	adc	r31, r19
 9ea:	80 81       	ld	r24, Z
 9ec:	48 17       	cp	r20, r24
 9ee:	19 f0       	breq	.+6      	; 0x9f6 <isequal+0xca>
		{
			flag = 1 ;
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	8d 83       	std	Y+5, r24	; 0x05
 9f4:	10 c0       	rjmp	.+32     	; 0xa16 <isequal+0xea>
			break ;
		}
		if (flag == 0 )
 9f6:	8d 81       	ldd	r24, Y+5	; 0x05
 9f8:	88 23       	and	r24, r24
 9fa:	19 f4       	brne	.+6      	; 0xa02 <isequal+0xd6>
		{
			return 1 ;
 9fc:	f1 e0       	ldi	r31, 0x01	; 1
 9fe:	fc 8b       	std	Y+20, r31	; 0x14
 a00:	2f c0       	rjmp	.+94     	; 0xa60 <isequal+0x134>
{
	u8 open[]  = "open" ;
	u8 closed[]  = "closed" ;

	u8 flag  = 0 ;
	for (int i = 0 ; i < 4 ; i++)
 a02:	8b 81       	ldd	r24, Y+3	; 0x03
 a04:	9c 81       	ldd	r25, Y+4	; 0x04
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	9c 83       	std	Y+4, r25	; 0x04
 a0a:	8b 83       	std	Y+3, r24	; 0x03
 a0c:	8b 81       	ldd	r24, Y+3	; 0x03
 a0e:	9c 81       	ldd	r25, Y+4	; 0x04
 a10:	84 30       	cpi	r24, 0x04	; 4
 a12:	91 05       	cpc	r25, r1
 a14:	dc f2       	brlt	.-74     	; 0x9cc <isequal+0xa0>
			return 1 ;
		}

	}

	for (int i = 0 ; i < 4 ; i++)
 a16:	1a 82       	std	Y+2, r1	; 0x02
 a18:	19 82       	std	Y+1, r1	; 0x01
 a1a:	89 81       	ldd	r24, Y+1	; 0x01
 a1c:	9a 81       	ldd	r25, Y+2	; 0x02
 a1e:	84 30       	cpi	r24, 0x04	; 4
 a20:	91 05       	cpc	r25, r1
 a22:	ec f4       	brge	.+58     	; 0xa5e <isequal+0x132>
	{
		if ( str[i] != closed[i] )
 a24:	29 81       	ldd	r18, Y+1	; 0x01
 a26:	3a 81       	ldd	r19, Y+2	; 0x02
 a28:	8a 89       	ldd	r24, Y+18	; 0x12
 a2a:	9b 89       	ldd	r25, Y+19	; 0x13
 a2c:	fc 01       	movw	r30, r24
 a2e:	e2 0f       	add	r30, r18
 a30:	f3 1f       	adc	r31, r19
 a32:	40 81       	ld	r20, Z
 a34:	29 81       	ldd	r18, Y+1	; 0x01
 a36:	3a 81       	ldd	r19, Y+2	; 0x02
 a38:	ce 01       	movw	r24, r28
 a3a:	0b 96       	adiw	r24, 0x0b	; 11
 a3c:	fc 01       	movw	r30, r24
 a3e:	e2 0f       	add	r30, r18
 a40:	f3 1f       	adc	r31, r19
 a42:	80 81       	ld	r24, Z
 a44:	48 17       	cp	r20, r24
 a46:	19 f0       	breq	.+6      	; 0xa4e <isequal+0x122>
		{
			flag = 2 ;
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	8d 83       	std	Y+5, r24	; 0x05
 a4c:	08 c0       	rjmp	.+16     	; 0xa5e <isequal+0x132>
			break ;
		}
		if (flag == 1 )
 a4e:	8d 81       	ldd	r24, Y+5	; 0x05
 a50:	81 30       	cpi	r24, 0x01	; 1
 a52:	19 f4       	brne	.+6      	; 0xa5a <isequal+0x12e>
		{
			return 2 ;
 a54:	82 e0       	ldi	r24, 0x02	; 2
 a56:	8c 8b       	std	Y+20, r24	; 0x14
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <isequal+0x134>
		}
		else
		{
			return 0 ;
 a5a:	1c 8a       	std	Y+20, r1	; 0x14
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <isequal+0x134>
		}

	}


	return 0 ;
 a5e:	1c 8a       	std	Y+20, r1	; 0x14
 a60:	8c 89       	ldd	r24, Y+20	; 0x14
}
 a62:	6e 96       	adiw	r28, 0x1e	; 30
 a64:	0f b6       	in	r0, 0x3f	; 63
 a66:	f8 94       	cli
 a68:	de bf       	out	0x3e, r29	; 62
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	cd bf       	out	0x3d, r28	; 61
 a6e:	cf 91       	pop	r28
 a70:	df 91       	pop	r29
 a72:	08 95       	ret

00000a74 <main>:




int main(void)
{
 a74:	df 93       	push	r29
 a76:	cf 93       	push	r28
 a78:	cd b7       	in	r28, 0x3d	; 61
 a7a:	de b7       	in	r29, 0x3e	; 62
 a7c:	6e 97       	sbiw	r28, 0x1e	; 30
 a7e:	0f b6       	in	r0, 0x3f	; 63
 a80:	f8 94       	cli
 a82:	de bf       	out	0x3e, r29	; 62
 a84:	0f be       	out	0x3f, r0	; 63
 a86:	cd bf       	out	0x3d, r28	; 61
	u8 Str[20];
	DIO_setupPinDirection(PORTA_ID, PIN0, PIN_OUTPUT);
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	41 e0       	ldi	r20, 0x01	; 1
 a8e:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_setupPinDirection>
	CLEAR_BIT(PORTA , PIN0);
 a92:	ab e3       	ldi	r26, 0x3B	; 59
 a94:	b0 e0       	ldi	r27, 0x00	; 0
 a96:	eb e3       	ldi	r30, 0x3B	; 59
 a98:	f0 e0       	ldi	r31, 0x00	; 0
 a9a:	80 81       	ld	r24, Z
 a9c:	8e 7f       	andi	r24, 0xFE	; 254
 a9e:	8c 93       	st	X, r24

	UART_ConfigType UART_Config ={BIT_8 ,DISABLED_PARITY ,STOP_ONE_BIT ,9600 };
 aa0:	ce 01       	movw	r24, r28
 aa2:	45 96       	adiw	r24, 0x15	; 21
 aa4:	9b 8f       	std	Y+27, r25	; 0x1b
 aa6:	8a 8f       	std	Y+26, r24	; 0x1a
 aa8:	ec e6       	ldi	r30, 0x6C	; 108
 aaa:	f0 e0       	ldi	r31, 0x00	; 0
 aac:	fd 8f       	std	Y+29, r31	; 0x1d
 aae:	ec 8f       	std	Y+28, r30	; 0x1c
 ab0:	f5 e0       	ldi	r31, 0x05	; 5
 ab2:	fe 8f       	std	Y+30, r31	; 0x1e
 ab4:	ec 8d       	ldd	r30, Y+28	; 0x1c
 ab6:	fd 8d       	ldd	r31, Y+29	; 0x1d
 ab8:	00 80       	ld	r0, Z
 aba:	8c 8d       	ldd	r24, Y+28	; 0x1c
 abc:	9d 8d       	ldd	r25, Y+29	; 0x1d
 abe:	01 96       	adiw	r24, 0x01	; 1
 ac0:	9d 8f       	std	Y+29, r25	; 0x1d
 ac2:	8c 8f       	std	Y+28, r24	; 0x1c
 ac4:	ea 8d       	ldd	r30, Y+26	; 0x1a
 ac6:	fb 8d       	ldd	r31, Y+27	; 0x1b
 ac8:	00 82       	st	Z, r0
 aca:	8a 8d       	ldd	r24, Y+26	; 0x1a
 acc:	9b 8d       	ldd	r25, Y+27	; 0x1b
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	9b 8f       	std	Y+27, r25	; 0x1b
 ad2:	8a 8f       	std	Y+26, r24	; 0x1a
 ad4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 ad6:	91 50       	subi	r25, 0x01	; 1
 ad8:	9e 8f       	std	Y+30, r25	; 0x1e
 ada:	ee 8d       	ldd	r30, Y+30	; 0x1e
 adc:	ee 23       	and	r30, r30
 ade:	51 f7       	brne	.-44     	; 0xab4 <main+0x40>
	UART_init( &UART_Config );
 ae0:	ce 01       	movw	r24, r28
 ae2:	45 96       	adiw	r24, 0x15	; 21
 ae4:	0e 94 41 00 	call	0x82	; 0x82 <UART_init>

	while(1)
	{
		UART_receiveString(Str);
 ae8:	ce 01       	movw	r24, r28
 aea:	01 96       	adiw	r24, 0x01	; 1
 aec:	0e 94 12 01 	call	0x224	; 0x224 <UART_receiveString>

		UART_sendString(Str);
 af0:	ce 01       	movw	r24, r28
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <UART_sendString>


		if (isequal(Str) == 1)
 af8:	ce 01       	movw	r24, r28
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	0e 94 96 04 	call	0x92c	; 0x92c <isequal>
 b00:	81 30       	cpi	r24, 0x01	; 1
 b02:	41 f4       	brne	.+16     	; 0xb14 <main+0xa0>
		{
			SET_BIT(PORTA, PIN0);
 b04:	ab e3       	ldi	r26, 0x3B	; 59
 b06:	b0 e0       	ldi	r27, 0x00	; 0
 b08:	eb e3       	ldi	r30, 0x3B	; 59
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	80 81       	ld	r24, Z
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	8c 93       	st	X, r24
 b12:	ea cf       	rjmp	.-44     	; 0xae8 <main+0x74>
		}
		else if(isequal(Str) == 2)
 b14:	ce 01       	movw	r24, r28
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	0e 94 96 04 	call	0x92c	; 0x92c <isequal>
 b1c:	82 30       	cpi	r24, 0x02	; 2
 b1e:	21 f7       	brne	.-56     	; 0xae8 <main+0x74>
		{
			CLEAR_BIT(PORTA, PIN0);
 b20:	ab e3       	ldi	r26, 0x3B	; 59
 b22:	b0 e0       	ldi	r27, 0x00	; 0
 b24:	eb e3       	ldi	r30, 0x3B	; 59
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	8e 7f       	andi	r24, 0xFE	; 254
 b2c:	8c 93       	st	X, r24
 b2e:	dc cf       	rjmp	.-72     	; 0xae8 <main+0x74>

00000b30 <__udivmodsi4>:
 b30:	a1 e2       	ldi	r26, 0x21	; 33
 b32:	1a 2e       	mov	r1, r26
 b34:	aa 1b       	sub	r26, r26
 b36:	bb 1b       	sub	r27, r27
 b38:	fd 01       	movw	r30, r26
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <__udivmodsi4_ep>

00000b3c <__udivmodsi4_loop>:
 b3c:	aa 1f       	adc	r26, r26
 b3e:	bb 1f       	adc	r27, r27
 b40:	ee 1f       	adc	r30, r30
 b42:	ff 1f       	adc	r31, r31
 b44:	a2 17       	cp	r26, r18
 b46:	b3 07       	cpc	r27, r19
 b48:	e4 07       	cpc	r30, r20
 b4a:	f5 07       	cpc	r31, r21
 b4c:	20 f0       	brcs	.+8      	; 0xb56 <__udivmodsi4_ep>
 b4e:	a2 1b       	sub	r26, r18
 b50:	b3 0b       	sbc	r27, r19
 b52:	e4 0b       	sbc	r30, r20
 b54:	f5 0b       	sbc	r31, r21

00000b56 <__udivmodsi4_ep>:
 b56:	66 1f       	adc	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	99 1f       	adc	r25, r25
 b5e:	1a 94       	dec	r1
 b60:	69 f7       	brne	.-38     	; 0xb3c <__udivmodsi4_loop>
 b62:	60 95       	com	r22
 b64:	70 95       	com	r23
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	bd 01       	movw	r22, r26
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret

00000b74 <_exit>:
 b74:	f8 94       	cli

00000b76 <__stop_program>:
 b76:	ff cf       	rjmp	.-2      	; 0xb76 <__stop_program>
