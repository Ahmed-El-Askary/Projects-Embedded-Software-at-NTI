#include "UART.h"
#include "LCD.h"
#include "SPI.h"
#include <util/delay.h>
//
//volatile u32 arr[20];
//#define MC2_READY 0x10
//
//
//u8 fun (u8 ah)
//{
//	SPI_sendNOBLOCK(ah);
//	DIO_writePin(PORTA_ID, PIN0, LOGIC_HIGH);
//	_delay_ms(3);
//	DIO_writePin(PORTA_ID, PIN0, LOGIC_LOW);
//	return  SPI_reNOBLOCK() ;
//}
//
//
//int main(void)
//{
//	DIO_setupPinDirection(PORTA_ID, PIN0, PIN_OUTPUT);
//
//
//	u8 Str[20];
//
//
//	SPI_initSlave();
//
//	UART_ConfigType UART_Config ={BIT_8 ,DISABLED_PARITY ,STOP_ONE_BIT ,9600 };
//	UART_init( &UART_Config );
//	LCD_init();
//	u8 var = 0 ;
//	LCD_moveCursor(0, 0);
//	while(1)
//	{
//		UART_receiveString(arr);
//		LCD_displayString(arr);
//
//
//		SPI_receiveString(Str);
//		LCD_displayString(Str);
//
//		_delay_ms(1000);
//		LCD_clearScreen();
//		for (int i = 0 ; arr[i] ; i++)
//		{
//			var = fun(arr[i]);
//		}
//
////		SPI_receiveString(Str);
////		LCD_displayString(Str);
////
////		_delay_ms(1000);
////		LCD_clearScreen();
//	}
//}
//
//
//
//

#define BUFFER_SIZE 20

uint8_t buffer[BUFFER_SIZE];

void SPI_slaveInit(void)
{
    // Initialize SPI as Slave
    SPI_initSlave();
}

int main(void)
{
    LCD_init();

    SPI_slaveInit();

    while (1)
    {
        // Receive data from master via SPI
        SPI_receiveString(buffer);

        // Display received data on LCD
        LCD_clearScreen();
        LCD_displayString(buffer);

        _delay_ms(1000);
    }
}
