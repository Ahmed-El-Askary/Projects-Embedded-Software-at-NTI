
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000028cc  00002960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000fe  008000fe  000029fe  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00002a00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001564  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008491  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000937c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a12c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ace7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 12 	call	0x247c	; 0x247c <main>
      8a:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ee       	ldi	r26, 0xEB	; 235
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ee       	ldi	r24, 0xEB	; 235
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24

	/************************** UCSRC Description Configuration **************************

	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF)|((Config_Ptr->parity)<< 4);
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	28 2f       	mov	r18, r24
     b7e:	2f 7c       	andi	r18, 0xCF	; 207
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	81 81       	ldd	r24, Z+1	; 0x01
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	82 95       	swap	r24
     b8c:	92 95       	swap	r25
     b8e:	90 7f       	andi	r25, 0xF0	; 240
     b90:	98 27       	eor	r25, r24
     b92:	80 7f       	andi	r24, 0xF0	; 240
     b94:	98 27       	eor	r25, r24
     b96:	82 2b       	or	r24, r18
     b98:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7)|((Config_Ptr->stop_bit)<< 3);
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	28 2f       	mov	r18, r24
     ba6:	27 7f       	andi	r18, 0xF7	; 247
     ba8:	eb 81       	ldd	r30, Y+3	; 0x03
     baa:	fc 81       	ldd	r31, Y+4	; 0x04
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	88 2f       	mov	r24, r24
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	82 2b       	or	r24, r18
     bc0:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9)|((Config_Ptr->bit_data)<< 1);
     bc2:	a0 e4       	ldi	r26, 0x40	; 64
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e0 e4       	ldi	r30, 0x40	; 64
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	28 2f       	mov	r18, r24
     bce:	29 7f       	andi	r18, 0xF9	; 249
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	80 81       	ld	r24, Z
     bd6:	88 2f       	mov	r24, r24
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	82 2b       	or	r24, r18
     be0:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	94 81       	ldd	r25, Z+4	; 0x04
     bea:	cc 01       	movw	r24, r24
     bec:	a0 e0       	ldi	r26, 0x00	; 0
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	aa 1f       	adc	r26, r26
     bf6:	bb 1f       	adc	r27, r27
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	aa 1f       	adc	r26, r26
     bfe:	bb 1f       	adc	r27, r27
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	aa 1f       	adc	r26, r26
     c06:	bb 1f       	adc	r27, r27
     c08:	9c 01       	movw	r18, r24
     c0a:	ad 01       	movw	r20, r26
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	92 e4       	ldi	r25, 0x42	; 66
     c10:	af e0       	ldi	r26, 0x0F	; 15
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 c6 13 	call	0x278c	; 0x278c <__udivmodsi4>
     c1c:	da 01       	movw	r26, r20
     c1e:	c9 01       	movw	r24, r18
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	9a 83       	std	Y+2, r25	; 0x02
     c24:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     c26:	e0 e4       	ldi	r30, 0x40	; 64
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	89 2f       	mov	r24, r25
     c30:	99 27       	eor	r25, r25
     c32:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c34:	e9 e2       	ldi	r30, 0x29	; 41
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	80 83       	st	Z, r24
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	0f 92       	push	r0
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 2f       	mov	r24, r24
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	80 72       	andi	r24, 0x20	; 32
     c62:	90 70       	andi	r25, 0x00	; 0
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	b9 f3       	breq	.-18     	; 0xc56 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c68:	ec e2       	ldi	r30, 0x2C	; 44
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c80:	eb e2       	ldi	r30, 0x2B	; 43
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	88 23       	and	r24, r24
     c88:	dc f7       	brge	.-10     	; 0xc80 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     c8a:	ec e2       	ldi	r30, 0x2C	; 44
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <UART_sendString+0x6>
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	9b 83       	std	Y+3, r25	; 0x03
     ca4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca6:	19 82       	std	Y+1, r1	; 0x01
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	28 2f       	mov	r18, r24
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	fc 01       	movw	r30, r24
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	80 81       	ld	r24, Z
     cbc:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_sendByte>
		i++;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	9b 81       	ldd	r25, Y+3	; 0x03
     cd0:	fc 01       	movw	r30, r24
     cd2:	e2 0f       	add	r30, r18
     cd4:	f3 1f       	adc	r31, r19
     cd6:	80 81       	ld	r24, Z
     cd8:	88 23       	and	r24, r24
     cda:	39 f7       	brne	.-50     	; 0xcaa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	cf 91       	pop	r28
     ce4:	df 91       	pop	r29
     ce6:	08 95       	ret

00000ce8 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	00 d0       	rcall	.+0      	; 0xcf2 <UART_receiveString+0xa>
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	9b 83       	std	Y+3, r25	; 0x03
     cfa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfc:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	9b 81       	ldd	r25, Y+3	; 0x03
     d08:	8c 01       	movw	r16, r24
     d0a:	02 0f       	add	r16, r18
     d0c:	13 1f       	adc	r17, r19
     d0e:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
     d12:	f8 01       	movw	r30, r16
     d14:	80 83       	st	Z, r24
     d16:	0f c0       	rjmp	.+30     	; 0xd36 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	8a 81       	ldd	r24, Y+2	; 0x02
     d26:	9b 81       	ldd	r25, Y+3	; 0x03
     d28:	8c 01       	movw	r16, r24
     d2a:	02 0f       	add	r16, r18
     d2c:	13 1f       	adc	r17, r19
     d2e:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
     d32:	f8 01       	movw	r30, r16
     d34:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	fc 01       	movw	r30, r24
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	80 81       	ld	r24, Z
     d48:	83 32       	cpi	r24, 0x23	; 35
     d4a:	31 f7       	brne	.-52     	; 0xd18 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
     d54:	9b 81       	ldd	r25, Y+3	; 0x03
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	10 82       	st	Z, r1
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	08 95       	ret

00000d6e <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     d98:	80 91 fe 00 	lds	r24, 0x00FE
     d9c:	90 91 ff 00 	lds	r25, 0x00FF
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <__vector_9+0x40>
	{
		(*g_callBackPtr)();
     da4:	e0 91 fe 00 	lds	r30, 0x00FE
     da8:	f0 91 ff 00 	lds	r31, 0x00FF
     dac:	09 95       	icall
	}
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     dfe:	80 91 fe 00 	lds	r24, 0x00FE
     e02:	90 91 ff 00 	lds	r25, 0x00FF
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
     e0a:	e0 91 fe 00 	lds	r30, 0x00FE
     e0e:	f0 91 ff 00 	lds	r31, 0x00FF
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <Timer1_init>:
 * 2.Inputs: pointer to the configuration structure with type Timer1_ConfigType.
 * 3.Return: None
 *
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <Timer1_init+0x6>
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
     e48:	af e4       	ldi	r26, 0x4F	; 79
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ef e4       	ldi	r30, 0x4F	; 79
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	98 2f       	mov	r25, r24
     e54:	9c 7f       	andi	r25, 0xFC	; 252
     e56:	e9 81       	ldd	r30, Y+1	; 0x01
     e58:	fa 81       	ldd	r31, Y+2	; 0x02
     e5a:	85 81       	ldd	r24, Z+5	; 0x05
     e5c:	83 70       	andi	r24, 0x03	; 3
     e5e:	89 2b       	or	r24, r25
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
	TCCR1B = ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C)<<1));
     e64:	ae e4       	ldi	r26, 0x4E	; 78
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ee e4       	ldi	r30, 0x4E	; 78
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	98 2f       	mov	r25, r24
     e70:	98 7f       	andi	r25, 0xF8	; 248
     e72:	e9 81       	ldd	r30, Y+1	; 0x01
     e74:	fa 81       	ldd	r31, Y+2	; 0x02
     e76:	84 81       	ldd	r24, Z+4	; 0x04
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	39 2f       	mov	r19, r25
     e7c:	38 2b       	or	r19, r24
     e7e:	ee e4       	ldi	r30, 0x4E	; 78
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	28 2f       	mov	r18, r24
     e86:	27 7e       	andi	r18, 0xE7	; 231
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	85 81       	ldd	r24, Z+5	; 0x05
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	8c 70       	andi	r24, 0x0C	; 12
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	82 2b       	or	r24, r18
     e9c:	83 2b       	or	r24, r19
     e9e:	8c 93       	st	X, r24
	TCNT1 = Config_Ptr->initial_value;
     ea0:	ac e4       	ldi	r26, 0x4C	; 76
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e9 81       	ldd	r30, Y+1	; 0x01
     ea6:	fa 81       	ldd	r31, Y+2	; 0x02
     ea8:	80 81       	ld	r24, Z
     eaa:	91 81       	ldd	r25, Z+1	; 0x01
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	9c 93       	st	X, r25
     eb0:	8e 93       	st	-X, r24

	if(Config_Ptr->mode == CompareMode)
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	85 81       	ldd	r24, Z+5	; 0x05
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	51 f4       	brne	.+20     	; 0xed0 <Timer1_init+0x96>
	{
		OCR1A = Config_Ptr->compare_value;
     ebc:	ea e4       	ldi	r30, 0x4A	; 74
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	a9 81       	ldd	r26, Y+1	; 0x01
     ec2:	ba 81       	ldd	r27, Y+2	; 0x02
     ec4:	12 96       	adiw	r26, 0x02	; 2
     ec6:	8d 91       	ld	r24, X+
     ec8:	9c 91       	ld	r25, X
     eca:	13 97       	sbiw	r26, 0x03	; 3
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A) ;
     ed0:	a9 e5       	ldi	r26, 0x59	; 89
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e9 e5       	ldi	r30, 0x59	; 89
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <Timer1_deInit>:
 * Inputs: None
 * Return: None
 *
 */
void Timer1_deInit(void)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     ef0:	ef e4       	ldi	r30, 0x4F	; 79
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	10 82       	st	Z, r1
	TCCR1B = 0;
     ef6:	ee e4       	ldi	r30, 0x4E	; 78
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	10 82       	st	Z, r1
	TCNT1 = 0;
     efc:	ec e4       	ldi	r30, 0x4C	; 76
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	11 82       	std	Z+1, r1	; 0x01
     f02:	10 82       	st	Z, r1
	OCR1A = 0;
     f04:	ea e4       	ldi	r30, 0x4A	; 74
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	11 82       	std	Z+1, r1	; 0x01
     f0a:	10 82       	st	Z, r1
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Timer1_setCallBack>:
 * Inputs:pointer to Call Back function.
 * Return: None
 *
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <Timer1_setCallBack+0x6>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	90 93 ff 00 	sts	0x00FF, r25
     f28:	80 93 fe 00 	sts	0x00FE, r24
}
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <GPIO_setupPinDirection+0x6>
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <GPIO_setupPinDirection+0x8>
     f3e:	0f 92       	push	r0
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	6a 83       	std	Y+2, r22	; 0x02
     f48:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 30       	cpi	r24, 0x08	; 8
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <GPIO_setupPinDirection+0x1c>
     f50:	d5 c0       	rjmp	.+426    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	84 30       	cpi	r24, 0x04	; 4
     f56:	08 f0       	brcs	.+2      	; 0xf5a <GPIO_setupPinDirection+0x24>
     f58:	d1 c0       	rjmp	.+418    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 05       	cpc	r25, r1
     f6c:	09 f4       	brne	.+2      	; 0xf70 <GPIO_setupPinDirection+0x3a>
     f6e:	43 c0       	rjmp	.+134    	; 0xff6 <GPIO_setupPinDirection+0xc0>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	2c f4       	brge	.+10     	; 0xf84 <GPIO_setupPinDirection+0x4e>
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	71 f0       	breq	.+28     	; 0xf9e <GPIO_setupPinDirection+0x68>
     f82:	bc c0       	rjmp	.+376    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <GPIO_setupPinDirection+0x5a>
     f8e:	5f c0       	rjmp	.+190    	; 0x104e <GPIO_setupPinDirection+0x118>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <GPIO_setupPinDirection+0x66>
     f9a:	85 c0       	rjmp	.+266    	; 0x10a6 <GPIO_setupPinDirection+0x170>
     f9c:	af c0       	rjmp	.+350    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fa4:	aa e3       	ldi	r26, 0x3A	; 58
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea e3       	ldi	r30, 0x3A	; 58
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_setupPinDirection+0x8c>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_setupPinDirection+0x88>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	98 c0       	rjmp	.+304    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fcc:	aa e3       	ldi	r26, 0x3A	; 58
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ea e3       	ldi	r30, 0x3A	; 58
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_setupPinDirection+0xb4>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_setupPinDirection+0xb0>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	83 c0       	rjmp	.+262    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	a1 f4       	brne	.+40     	; 0x1024 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     ffc:	a7 e3       	ldi	r26, 0x37	; 55
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GPIO_setupPinDirection+0xe4>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GPIO_setupPinDirection+0xe0>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	6c c0       	rjmp	.+216    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1024:	a7 e3       	ldi	r26, 0x37	; 55
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <GPIO_setupPinDirection+0x10c>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <GPIO_setupPinDirection+0x108>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	57 c0       	rjmp	.+174    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a1 f4       	brne	.+40     	; 0x107c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1054:	a4 e3       	ldi	r26, 0x34	; 52
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_setupPinDirection+0x13c>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_setupPinDirection+0x138>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	40 c0       	rjmp	.+128    	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    107c:	a4 e3       	ldi	r26, 0x34	; 52
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_setupPinDirection+0x164>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_setupPinDirection+0x160>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	2b c0       	rjmp	.+86     	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	a1 f4       	brne	.+40     	; 0x10d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10ac:	a1 e3       	ldi	r26, 0x31	; 49
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e1 e3       	ldi	r30, 0x31	; 49
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_setupPinDirection+0x194>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_setupPinDirection+0x190>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10d4:	a1 e3       	ldi	r26, 0x31	; 49
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e1 e3       	ldi	r30, 0x31	; 49
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_setupPinDirection+0x1bc>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_setupPinDirection+0x1b8>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <GPIO_writePin+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <GPIO_writePin+0x8>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	89 83       	std	Y+1, r24	; 0x01
    111c:	6a 83       	std	Y+2, r22	; 0x02
    111e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	88 30       	cpi	r24, 0x08	; 8
    1124:	08 f0       	brcs	.+2      	; 0x1128 <GPIO_writePin+0x1c>
    1126:	d5 c0       	rjmp	.+426    	; 0x12d2 <GPIO_writePin+0x1c6>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	08 f0       	brcs	.+2      	; 0x1130 <GPIO_writePin+0x24>
    112e:	d1 c0       	rjmp	.+418    	; 0x12d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3d 83       	std	Y+5, r19	; 0x05
    1138:	2c 83       	std	Y+4, r18	; 0x04
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	09 f4       	brne	.+2      	; 0x1146 <GPIO_writePin+0x3a>
    1144:	43 c0       	rjmp	.+134    	; 0x11cc <GPIO_writePin+0xc0>
    1146:	2c 81       	ldd	r18, Y+4	; 0x04
    1148:	3d 81       	ldd	r19, Y+5	; 0x05
    114a:	22 30       	cpi	r18, 0x02	; 2
    114c:	31 05       	cpc	r19, r1
    114e:	2c f4       	brge	.+10     	; 0x115a <GPIO_writePin+0x4e>
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	71 f0       	breq	.+28     	; 0x1174 <GPIO_writePin+0x68>
    1158:	bc c0       	rjmp	.+376    	; 0x12d2 <GPIO_writePin+0x1c6>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	09 f4       	brne	.+2      	; 0x1166 <GPIO_writePin+0x5a>
    1164:	5f c0       	rjmp	.+190    	; 0x1224 <GPIO_writePin+0x118>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_writePin+0x66>
    1170:	85 c0       	rjmp	.+266    	; 0x127c <GPIO_writePin+0x170>
    1172:	af c0       	rjmp	.+350    	; 0x12d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	a1 f4       	brne	.+40     	; 0x11a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <GPIO_writePin+0x8c>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <GPIO_writePin+0x88>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	98 c0       	rjmp	.+304    	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11a2:	ab e3       	ldi	r26, 0x3B	; 59
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	eb e3       	ldi	r30, 0x3B	; 59
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <GPIO_writePin+0xb4>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <GPIO_writePin+0xb0>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	83 c0       	rjmp	.+262    	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	a1 f4       	brne	.+40     	; 0x11fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11d2:	a8 e3       	ldi	r26, 0x38	; 56
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e8 e3       	ldi	r30, 0x38	; 56
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_writePin+0xe4>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_writePin+0xe0>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	6c c0       	rjmp	.+216    	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11fa:	a8 e3       	ldi	r26, 0x38	; 56
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e8 e3       	ldi	r30, 0x38	; 56
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <GPIO_writePin+0x10c>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <GPIO_writePin+0x108>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	57 c0       	rjmp	.+174    	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	a1 f4       	brne	.+40     	; 0x1252 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    122a:	a5 e3       	ldi	r26, 0x35	; 53
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_writePin+0x13c>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_writePin+0x138>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	40 c0       	rjmp	.+128    	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1252:	a5 e3       	ldi	r26, 0x35	; 53
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e3       	ldi	r30, 0x35	; 53
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_writePin+0x164>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_writePin+0x160>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	2b c0       	rjmp	.+86     	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	a1 f4       	brne	.+40     	; 0x12aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1282:	a2 e3       	ldi	r26, 0x32	; 50
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e2 e3       	ldi	r30, 0x32	; 50
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_writePin+0x194>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_writePin+0x190>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12aa:	a2 e3       	ldi	r26, 0x32	; 50
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e2 e3       	ldi	r30, 0x32	; 50
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_writePin+0x1bc>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_writePin+0x1b8>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <GPIO_readPin+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <GPIO_readPin+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 30       	cpi	r24, 0x08	; 8
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <GPIO_readPin+0x1c>
    12fc:	84 c0       	rjmp	.+264    	; 0x1406 <GPIO_readPin+0x124>
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	84 30       	cpi	r24, 0x04	; 4
    1302:	08 f0       	brcs	.+2      	; 0x1306 <GPIO_readPin+0x24>
    1304:	80 c0       	rjmp	.+256    	; 0x1406 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3d 83       	std	Y+5, r19	; 0x05
    130e:	2c 83       	std	Y+4, r18	; 0x04
    1310:	4c 81       	ldd	r20, Y+4	; 0x04
    1312:	5d 81       	ldd	r21, Y+5	; 0x05
    1314:	41 30       	cpi	r20, 0x01	; 1
    1316:	51 05       	cpc	r21, r1
    1318:	79 f1       	breq	.+94     	; 0x1378 <GPIO_readPin+0x96>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	91 05       	cpc	r25, r1
    1322:	34 f4       	brge	.+12     	; 0x1330 <GPIO_readPin+0x4e>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	69 f0       	breq	.+26     	; 0x1348 <GPIO_readPin+0x66>
    132e:	6b c0       	rjmp	.+214    	; 0x1406 <GPIO_readPin+0x124>
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	42 30       	cpi	r20, 0x02	; 2
    1336:	51 05       	cpc	r21, r1
    1338:	b9 f1       	breq	.+110    	; 0x13a8 <GPIO_readPin+0xc6>
    133a:	8c 81       	ldd	r24, Y+4	; 0x04
    133c:	9d 81       	ldd	r25, Y+5	; 0x05
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <GPIO_readPin+0x64>
    1344:	49 c0       	rjmp	.+146    	; 0x13d8 <GPIO_readPin+0xf6>
    1346:	5f c0       	rjmp	.+190    	; 0x1406 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1348:	e9 e3       	ldi	r30, 0x39	; 57
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a9 01       	movw	r20, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_readPin+0x7e>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_readPin+0x7a>
    1364:	ca 01       	movw	r24, r20
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	88 23       	and	r24, r24
    136c:	19 f0       	breq	.+6      	; 0x1374 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	49 c0       	rjmp	.+146    	; 0x1406 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1374:	19 82       	std	Y+1, r1	; 0x01
    1376:	47 c0       	rjmp	.+142    	; 0x1406 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1378:	e6 e3       	ldi	r30, 0x36	; 54
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	a9 01       	movw	r20, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_readPin+0xae>
    138c:	55 95       	asr	r21
    138e:	47 95       	ror	r20
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_readPin+0xaa>
    1394:	ca 01       	movw	r24, r20
    1396:	81 70       	andi	r24, 0x01	; 1
    1398:	90 70       	andi	r25, 0x00	; 0
    139a:	88 23       	and	r24, r24
    139c:	19 f0       	breq	.+6      	; 0x13a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	31 c0       	rjmp	.+98     	; 0x1406 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	2f c0       	rjmp	.+94     	; 0x1406 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13a8:	e3 e3       	ldi	r30, 0x33	; 51
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a9 01       	movw	r20, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_readPin+0xde>
    13bc:	55 95       	asr	r21
    13be:	47 95       	ror	r20
    13c0:	8a 95       	dec	r24
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_readPin+0xda>
    13c4:	ca 01       	movw	r24, r20
    13c6:	81 70       	andi	r24, 0x01	; 1
    13c8:	90 70       	andi	r25, 0x00	; 0
    13ca:	88 23       	and	r24, r24
    13cc:	19 f0       	breq	.+6      	; 0x13d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01
    13d2:	19 c0       	rjmp	.+50     	; 0x1406 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13d4:	19 82       	std	Y+1, r1	; 0x01
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13d8:	e0 e3       	ldi	r30, 0x30	; 48
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_readPin+0x10e>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_readPin+0x10a>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	88 23       	and	r24, r24
    13fc:	19 f0       	breq	.+6      	; 0x1404 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1404:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <GPIO_setupPortDirection+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <GPIO_setupPortDirection+0x8>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	90 f5       	brcc	.+100    	; 0x1492 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3c 83       	std	Y+4, r19	; 0x04
    1436:	2b 83       	std	Y+3, r18	; 0x03
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	d1 f0       	breq	.+52     	; 0x1476 <GPIO_setupPortDirection+0x5e>
    1442:	2b 81       	ldd	r18, Y+3	; 0x03
    1444:	3c 81       	ldd	r19, Y+4	; 0x04
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <GPIO_setupPortDirection+0x3e>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <GPIO_setupPortDirection+0x54>
    1454:	1e c0       	rjmp	.+60     	; 0x1492 <GPIO_setupPortDirection+0x7a>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	81 f0       	breq	.+32     	; 0x1480 <GPIO_setupPortDirection+0x68>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <GPIO_setupPortDirection+0x72>
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	80 83       	st	Z, r24
    1474:	0e c0       	rjmp	.+28     	; 0x1492 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1476:	e7 e3       	ldi	r30, 0x37	; 55
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	80 83       	st	Z, r24
    147e:	09 c0       	rjmp	.+18     	; 0x1492 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1480:	e4 e3       	ldi	r30, 0x34	; 52
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    148a:	e1 e3       	ldi	r30, 0x31	; 49
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
			break;
		}
	}
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GPIO_writePort+0x6>
    14a6:	00 d0       	rcall	.+0      	; 0x14a8 <GPIO_writePort+0x8>
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	84 30       	cpi	r24, 0x04	; 4
    14b4:	90 f5       	brcc	.+100    	; 0x151a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	3c 83       	std	Y+4, r19	; 0x04
    14be:	2b 83       	std	Y+3, r18	; 0x03
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	91 05       	cpc	r25, r1
    14c8:	d1 f0       	breq	.+52     	; 0x14fe <GPIO_writePort+0x5e>
    14ca:	2b 81       	ldd	r18, Y+3	; 0x03
    14cc:	3c 81       	ldd	r19, Y+4	; 0x04
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <GPIO_writePort+0x3e>
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	61 f0       	breq	.+24     	; 0x14f4 <GPIO_writePort+0x54>
    14dc:	1e c0       	rjmp	.+60     	; 0x151a <GPIO_writePort+0x7a>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <GPIO_writePort+0x68>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	83 30       	cpi	r24, 0x03	; 3
    14ee:	91 05       	cpc	r25, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <GPIO_writePort+0x72>
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	80 83       	st	Z, r24
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14fe:	e8 e3       	ldi	r30, 0x38	; 56
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 83       	st	Z, r24
    1506:	09 c0       	rjmp	.+18     	; 0x151a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1508:	e5 e3       	ldi	r30, 0x35	; 53
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	04 c0       	rjmp	.+8      	; 0x151a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1512:	e2 e3       	ldi	r30, 0x32	; 50
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
			break;
		}
	}
}
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <GPIO_readPort+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <GPIO_readPort+0x8>
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1536:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	90 f5       	brcc	.+100    	; 0x15a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3c 83       	std	Y+4, r19	; 0x04
    1546:	2b 83       	std	Y+3, r18	; 0x03
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	9c 81       	ldd	r25, Y+4	; 0x04
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	d1 f0       	breq	.+52     	; 0x1586 <GPIO_readPort+0x5e>
    1552:	2b 81       	ldd	r18, Y+3	; 0x03
    1554:	3c 81       	ldd	r19, Y+4	; 0x04
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <GPIO_readPort+0x3e>
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 f0       	breq	.+24     	; 0x157c <GPIO_readPort+0x54>
    1564:	1e c0       	rjmp	.+60     	; 0x15a2 <GPIO_readPort+0x7a>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	81 f0       	breq	.+32     	; 0x1590 <GPIO_readPort+0x68>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	81 f0       	breq	.+32     	; 0x159a <GPIO_readPort+0x72>
    157a:	13 c0       	rjmp	.+38     	; 0x15a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    157c:	e9 e3       	ldi	r30, 0x39	; 57
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	0e c0       	rjmp	.+28     	; 0x15a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1586:	e6 e3       	ldi	r30, 0x36	; 54
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1590:	e3 e3       	ldi	r30, 0x33	; 51
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    159a:	e0 e3       	ldi	r30, 0x30	; 48
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	2e 97       	sbiw	r28, 0x0e	; 14
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	41 e0       	ldi	r20, 0x01	; 1
    15cc:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 ea       	ldi	r26, 0xA0	; 160
    15e0:	b1 e4       	ldi	r27, 0x41	; 65
    15e2:	8b 87       	std	Y+11, r24	; 0x0b
    15e4:	9c 87       	std	Y+12, r25	; 0x0c
    15e6:	ad 87       	std	Y+13, r26	; 0x0d
    15e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a e7       	ldi	r20, 0x7A	; 122
    15f8:	53 e4       	ldi	r21, 0x43	; 67
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8f 83       	std	Y+7, r24	; 0x07
    1604:	98 87       	std	Y+8, r25	; 0x08
    1606:	a9 87       	std	Y+9, r26	; 0x09
    1608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	2c f4       	brge	.+10     	; 0x162c <LCD_init+0x7a>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <LCD_init+0xf8>
	else if (__tmp > 65535)
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	4c f5       	brge	.+82     	; 0x1696 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1644:	6b 85       	ldd	r22, Y+11	; 0x0b
    1646:	7c 85       	ldd	r23, Y+12	; 0x0c
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	51 e4       	ldi	r21, 0x41	; 65
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	0f c0       	rjmp	.+30     	; 0x168c <LCD_init+0xda>
    166e:	89 e1       	ldi	r24, 0x19	; 25
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_init+0xc8>
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f7       	brne	.-38     	; 0x166e <LCD_init+0xbc>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <LCD_init+0x104>
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16c6:	88 e3       	ldi	r24, 0x38	; 56
    16c8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16cc:	8c e0       	ldi	r24, 0x0C	; 12
    16ce:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    16d8:	2e 96       	adiw	r28, 0x0e	; 14
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	e9 97       	sbiw	r28, 0x39	; 57
    16f4:	0f b6       	in	r0, 0x3f	; 63
    16f6:	f8 94       	cli
    16f8:	de bf       	out	0x3e, r29	; 62
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	cd bf       	out	0x3d, r28	; 61
    16fe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 e8       	ldi	r26, 0x80	; 128
    1710:	bf e3       	ldi	r27, 0x3F	; 63
    1712:	8d ab       	std	Y+53, r24	; 0x35
    1714:	9e ab       	std	Y+54, r25	; 0x36
    1716:	af ab       	std	Y+55, r26	; 0x37
    1718:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171a:	6d a9       	ldd	r22, Y+53	; 0x35
    171c:	7e a9       	ldd	r23, Y+54	; 0x36
    171e:	8f a9       	ldd	r24, Y+55	; 0x37
    1720:	98 ad       	ldd	r25, Y+56	; 0x38
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a e7       	ldi	r20, 0x7A	; 122
    1728:	53 e4       	ldi	r21, 0x43	; 67
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	89 ab       	std	Y+49, r24	; 0x31
    1734:	9a ab       	std	Y+50, r25	; 0x32
    1736:	ab ab       	std	Y+51, r26	; 0x33
    1738:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    173a:	69 a9       	ldd	r22, Y+49	; 0x31
    173c:	7a a9       	ldd	r23, Y+50	; 0x32
    173e:	8b a9       	ldd	r24, Y+51	; 0x33
    1740:	9c a9       	ldd	r25, Y+52	; 0x34
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	2c f4       	brge	.+10     	; 0x175c <LCD_sendCommand+0x72>
		__ticks = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	98 ab       	std	Y+48, r25	; 0x30
    1758:	8f a7       	std	Y+47, r24	; 0x2f
    175a:	3f c0       	rjmp	.+126    	; 0x17da <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    175c:	69 a9       	ldd	r22, Y+49	; 0x31
    175e:	7a a9       	ldd	r23, Y+50	; 0x32
    1760:	8b a9       	ldd	r24, Y+51	; 0x33
    1762:	9c a9       	ldd	r25, Y+52	; 0x34
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	4c f5       	brge	.+82     	; 0x17c6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	6d a9       	ldd	r22, Y+53	; 0x35
    1776:	7e a9       	ldd	r23, Y+54	; 0x36
    1778:	8f a9       	ldd	r24, Y+55	; 0x37
    177a:	98 ad       	ldd	r25, Y+56	; 0x38
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	98 ab       	std	Y+48, r25	; 0x30
    179a:	8f a7       	std	Y+47, r24	; 0x2f
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <LCD_sendCommand+0xd2>
    179e:	89 e1       	ldi	r24, 0x19	; 25
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9e a7       	std	Y+46, r25	; 0x2e
    17a4:	8d a7       	std	Y+45, r24	; 0x2d
    17a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    17a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_sendCommand+0xc0>
    17ae:	9e a7       	std	Y+46, r25	; 0x2e
    17b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b4:	98 a9       	ldd	r25, Y+48	; 0x30
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	98 ab       	std	Y+48, r25	; 0x30
    17ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17be:	98 a9       	ldd	r25, Y+48	; 0x30
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <LCD_sendCommand+0xb4>
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	69 a9       	ldd	r22, Y+49	; 0x31
    17c8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ca:	8b a9       	ldd	r24, Y+51	; 0x33
    17cc:	9c a9       	ldd	r25, Y+52	; 0x34
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	98 ab       	std	Y+48, r25	; 0x30
    17d8:	8f a7       	std	Y+47, r24	; 0x2f
    17da:	8f a5       	ldd	r24, Y+47	; 0x2f
    17dc:	98 a9       	ldd	r25, Y+48	; 0x30
    17de:	9c a7       	std	Y+44, r25	; 0x2c
    17e0:	8b a7       	std	Y+43, r24	; 0x2b
    17e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <LCD_sendCommand+0xfc>
    17ea:	9c a7       	std	Y+44, r25	; 0x2c
    17ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e8       	ldi	r26, 0x80	; 128
    17fe:	bf e3       	ldi	r27, 0x3F	; 63
    1800:	8f a3       	std	Y+39, r24	; 0x27
    1802:	98 a7       	std	Y+40, r25	; 0x28
    1804:	a9 a7       	std	Y+41, r26	; 0x29
    1806:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6f a1       	ldd	r22, Y+39	; 0x27
    180a:	78 a5       	ldd	r23, Y+40	; 0x28
    180c:	89 a5       	ldd	r24, Y+41	; 0x29
    180e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	8b a3       	std	Y+35, r24	; 0x23
    1822:	9c a3       	std	Y+36, r25	; 0x24
    1824:	ad a3       	std	Y+37, r26	; 0x25
    1826:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1828:	6b a1       	ldd	r22, Y+35	; 0x23
    182a:	7c a1       	ldd	r23, Y+36	; 0x24
    182c:	8d a1       	ldd	r24, Y+37	; 0x25
    182e:	9e a1       	ldd	r25, Y+38	; 0x26
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LCD_sendCommand+0x160>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    184a:	6b a1       	ldd	r22, Y+35	; 0x23
    184c:	7c a1       	ldd	r23, Y+36	; 0x24
    184e:	8d a1       	ldd	r24, Y+37	; 0x25
    1850:	9e a1       	ldd	r25, Y+38	; 0x26
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6f a1       	ldd	r22, Y+39	; 0x27
    1864:	78 a5       	ldd	r23, Y+40	; 0x28
    1866:	89 a5       	ldd	r24, Y+41	; 0x29
    1868:	9a a5       	ldd	r25, Y+42	; 0x2a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9a a3       	std	Y+34, r25	; 0x22
    1888:	89 a3       	std	Y+33, r24	; 0x21
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_sendCommand+0x1c0>
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	98 a3       	std	Y+32, r25	; 0x20
    1892:	8f 8f       	std	Y+31, r24	; 0x1f
    1894:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1896:	98 a1       	ldd	r25, Y+32	; 0x20
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_sendCommand+0x1ae>
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	89 a1       	ldd	r24, Y+33	; 0x21
    18a2:	9a a1       	ldd	r25, Y+34	; 0x22
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	9a a3       	std	Y+34, r25	; 0x22
    18a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	89 a1       	ldd	r24, Y+33	; 0x21
    18ac:	9a a1       	ldd	r25, Y+34	; 0x22
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_sendCommand+0x1a2>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	6b a1       	ldd	r22, Y+35	; 0x23
    18b6:	7c a1       	ldd	r23, Y+36	; 0x24
    18b8:	8d a1       	ldd	r24, Y+37	; 0x25
    18ba:	9e a1       	ldd	r25, Y+38	; 0x26
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	9a a3       	std	Y+34, r25	; 0x22
    18c6:	89 a3       	std	Y+33, r24	; 0x21
    18c8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ca:	9a a1       	ldd	r25, Y+34	; 0x22
    18cc:	9e 8f       	std	Y+30, r25	; 0x1e
    18ce:	8d 8f       	std	Y+29, r24	; 0x1d
    18d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_sendCommand+0x1ea>
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	69 ad       	ldd	r22, Y+57	; 0x39
    18e0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <GPIO_writePort>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a0 e8       	ldi	r26, 0x80	; 128
    18ea:	bf e3       	ldi	r27, 0x3F	; 63
    18ec:	89 8f       	std	Y+25, r24	; 0x19
    18ee:	9a 8f       	std	Y+26, r25	; 0x1a
    18f0:	ab 8f       	std	Y+27, r26	; 0x1b
    18f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f4:	69 8d       	ldd	r22, Y+25	; 0x19
    18f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	4a e7       	ldi	r20, 0x7A	; 122
    1902:	53 e4       	ldi	r21, 0x43	; 67
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	8d 8b       	std	Y+21, r24	; 0x15
    190e:	9e 8b       	std	Y+22, r25	; 0x16
    1910:	af 8b       	std	Y+23, r26	; 0x17
    1912:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1914:	6d 89       	ldd	r22, Y+21	; 0x15
    1916:	7e 89       	ldd	r23, Y+22	; 0x16
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <LCD_sendCommand+0x24c>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9c 8b       	std	Y+20, r25	; 0x14
    1932:	8b 8b       	std	Y+19, r24	; 0x13
    1934:	3f c0       	rjmp	.+126    	; 0x19b4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	3f ef       	ldi	r19, 0xFF	; 255
    1942:	4f e7       	ldi	r20, 0x7F	; 127
    1944:	57 e4       	ldi	r21, 0x47	; 71
    1946:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194a:	18 16       	cp	r1, r24
    194c:	4c f5       	brge	.+82     	; 0x19a0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194e:	69 8d       	ldd	r22, Y+25	; 0x19
    1950:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	40 e2       	ldi	r20, 0x20	; 32
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9c 8b       	std	Y+20, r25	; 0x14
    1974:	8b 8b       	std	Y+19, r24	; 0x13
    1976:	0f c0       	rjmp	.+30     	; 0x1996 <LCD_sendCommand+0x2ac>
    1978:	89 e1       	ldi	r24, 0x19	; 25
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9a 8b       	std	Y+18, r25	; 0x12
    197e:	89 8b       	std	Y+17, r24	; 0x11
    1980:	89 89       	ldd	r24, Y+17	; 0x11
    1982:	9a 89       	ldd	r25, Y+18	; 0x12
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_sendCommand+0x29a>
    1988:	9a 8b       	std	Y+18, r25	; 0x12
    198a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198c:	8b 89       	ldd	r24, Y+19	; 0x13
    198e:	9c 89       	ldd	r25, Y+20	; 0x14
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1996:	8b 89       	ldd	r24, Y+19	; 0x13
    1998:	9c 89       	ldd	r25, Y+20	; 0x14
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	69 f7       	brne	.-38     	; 0x1978 <LCD_sendCommand+0x28e>
    199e:	14 c0       	rjmp	.+40     	; 0x19c8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a0:	6d 89       	ldd	r22, Y+21	; 0x15
    19a2:	7e 89       	ldd	r23, Y+22	; 0x16
    19a4:	8f 89       	ldd	r24, Y+23	; 0x17
    19a6:	98 8d       	ldd	r25, Y+24	; 0x18
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	8b 89       	ldd	r24, Y+19	; 0x13
    19b6:	9c 89       	ldd	r25, Y+20	; 0x14
    19b8:	98 8b       	std	Y+16, r25	; 0x10
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
    19bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19be:	98 89       	ldd	r25, Y+16	; 0x10
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	f1 f7       	brne	.-4      	; 0x19c0 <LCD_sendCommand+0x2d6>
    19c4:	98 8b       	std	Y+16, r25	; 0x10
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a0 e8       	ldi	r26, 0x80	; 128
    19d8:	bf e3       	ldi	r27, 0x3F	; 63
    19da:	8b 87       	std	Y+11, r24	; 0x0b
    19dc:	9c 87       	std	Y+12, r25	; 0x0c
    19de:	ad 87       	std	Y+13, r26	; 0x0d
    19e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	53 e4       	ldi	r21, 0x43	; 67
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8f 83       	std	Y+7, r24	; 0x07
    19fc:	98 87       	std	Y+8, r25	; 0x08
    19fe:	a9 87       	std	Y+9, r26	; 0x09
    1a00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e 83       	std	Y+6, r25	; 0x06
    1a20:	8d 83       	std	Y+5, r24	; 0x05
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a24:	6f 81       	ldd	r22, Y+7	; 0x07
    1a26:	78 85       	ldd	r23, Y+8	; 0x08
    1a28:	89 85       	ldd	r24, Y+9	; 0x09
    1a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9e 83       	std	Y+6, r25	; 0x06
    1a62:	8d 83       	std	Y+5, r24	; 0x05
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_sendCommand+0x39a>
    1a66:	89 e1       	ldi	r24, 0x19	; 25
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9c 83       	std	Y+4, r25	; 0x04
    1a6c:	8b 83       	std	Y+3, r24	; 0x03
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	9c 81       	ldd	r25, Y+4	; 0x04
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_sendCommand+0x388>
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9e 83       	std	Y+6, r25	; 0x06
    1a82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_sendCommand+0x37c>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a90:	78 85       	ldd	r23, Y+8	; 0x08
    1a92:	89 85       	ldd	r24, Y+9	; 0x09
    1a94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_sendCommand+0x3c4>
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ab6:	e9 96       	adiw	r28, 0x39	; 57
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	e9 97       	sbiw	r28, 0x39	; 57
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	89 af       	std	Y+57, r24	; 0x39
    GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	41 e0       	ldi	r20, 0x01	; 1
    1ae4:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	8d ab       	std	Y+53, r24	; 0x35
    1af2:	9e ab       	std	Y+54, r25	; 0x36
    1af4:	af ab       	std	Y+55, r26	; 0x37
    1af6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6d a9       	ldd	r22, Y+53	; 0x35
    1afa:	7e a9       	ldd	r23, Y+54	; 0x36
    1afc:	8f a9       	ldd	r24, Y+55	; 0x37
    1afe:	98 ad       	ldd	r25, Y+56	; 0x38
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a e7       	ldi	r20, 0x7A	; 122
    1b06:	53 e4       	ldi	r21, 0x43	; 67
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	89 ab       	std	Y+49, r24	; 0x31
    1b12:	9a ab       	std	Y+50, r25	; 0x32
    1b14:	ab ab       	std	Y+51, r26	; 0x33
    1b16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b18:	69 a9       	ldd	r22, Y+49	; 0x31
    1b1a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b1c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b1e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	98 ab       	std	Y+48, r25	; 0x30
    1b36:	8f a7       	std	Y+47, r24	; 0x2f
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b40:	9c a9       	ldd	r25, Y+52	; 0x34
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6d a9       	ldd	r22, Y+53	; 0x35
    1b54:	7e a9       	ldd	r23, Y+54	; 0x36
    1b56:	8f a9       	ldd	r24, Y+55	; 0x37
    1b58:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	98 ab       	std	Y+48, r25	; 0x30
    1b78:	8f a7       	std	Y+47, r24	; 0x2f
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_displayCharacter+0xd2>
    1b7c:	89 e1       	ldi	r24, 0x19	; 25
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9e a7       	std	Y+46, r25	; 0x2e
    1b82:	8d a7       	std	Y+45, r24	; 0x2d
    1b84:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b86:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_displayCharacter+0xc0>
    1b8c:	9e a7       	std	Y+46, r25	; 0x2e
    1b8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b92:	98 a9       	ldd	r25, Y+48	; 0x30
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_displayCharacter+0xb4>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    1baa:	9c a9       	ldd	r25, Y+52	; 0x34
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
    1bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bba:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbc:	9c a7       	std	Y+44, r25	; 0x2c
    1bbe:	8b a7       	std	Y+43, r24	; 0x2b
    1bc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayCharacter+0xfc>
    1bc8:	9c a7       	std	Y+44, r25	; 0x2c
    1bca:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e8       	ldi	r26, 0x80	; 128
    1bdc:	bf e3       	ldi	r27, 0x3F	; 63
    1bde:	8f a3       	std	Y+39, r24	; 0x27
    1be0:	98 a7       	std	Y+40, r25	; 0x28
    1be2:	a9 a7       	std	Y+41, r26	; 0x29
    1be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	6f a1       	ldd	r22, Y+39	; 0x27
    1be8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bea:	89 a5       	ldd	r24, Y+41	; 0x29
    1bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	53 e4       	ldi	r21, 0x43	; 67
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8b a3       	std	Y+35, r24	; 0x23
    1c00:	9c a3       	std	Y+36, r25	; 0x24
    1c02:	ad a3       	std	Y+37, r26	; 0x25
    1c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c06:	6b a1       	ldd	r22, Y+35	; 0x23
    1c08:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9a a3       	std	Y+34, r25	; 0x22
    1c66:	89 a3       	std	Y+33, r24	; 0x21
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <LCD_displayCharacter+0x1c0>
    1c6a:	89 e1       	ldi	r24, 0x19	; 25
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	98 a3       	std	Y+32, r25	; 0x20
    1c70:	8f 8f       	std	Y+31, r24	; 0x1f
    1c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c74:	98 a1       	ldd	r25, Y+32	; 0x20
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_displayCharacter+0x1ae>
    1c7a:	98 a3       	std	Y+32, r25	; 0x20
    1c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c80:	9a a1       	ldd	r25, Y+34	; 0x22
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <LCD_displayCharacter+0x1a2>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6b a1       	ldd	r22, Y+35	; 0x23
    1c94:	7c a1       	ldd	r23, Y+36	; 0x24
    1c96:	8d a1       	ldd	r24, Y+37	; 0x25
    1c98:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    1caa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cac:	8d 8f       	std	Y+29, r24	; 0x1d
    1cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_displayCharacter+0x1ea>
    1cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	69 ad       	ldd	r22, Y+57	; 0x39
    1cbe:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <GPIO_writePort>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	89 8f       	std	Y+25, r24	; 0x19
    1ccc:	9a 8f       	std	Y+26, r25	; 0x1a
    1cce:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	53 e4       	ldi	r21, 0x43	; 67
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8d 8b       	std	Y+21, r24	; 0x15
    1cec:	9e 8b       	std	Y+22, r25	; 0x16
    1cee:	af 8b       	std	Y+23, r26	; 0x17
    1cf0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d14:	6d 89       	ldd	r22, Y+21	; 0x15
    1d16:	7e 89       	ldd	r23, Y+22	; 0x16
    1d18:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9c 8b       	std	Y+20, r25	; 0x14
    1d52:	8b 8b       	std	Y+19, r24	; 0x13
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_displayCharacter+0x2ac>
    1d56:	89 e1       	ldi	r24, 0x19	; 25
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9a 8b       	std	Y+18, r25	; 0x12
    1d5c:	89 8b       	std	Y+17, r24	; 0x11
    1d5e:	89 89       	ldd	r24, Y+17	; 0x11
    1d60:	9a 89       	ldd	r25, Y+18	; 0x12
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_displayCharacter+0x29a>
    1d66:	9a 8b       	std	Y+18, r25	; 0x12
    1d68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8b 89       	ldd	r24, Y+19	; 0x13
    1d76:	9c 89       	ldd	r25, Y+20	; 0x14
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_displayCharacter+0x28e>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	8b 89       	ldd	r24, Y+19	; 0x13
    1d94:	9c 89       	ldd	r25, Y+20	; 0x14
    1d96:	98 8b       	std	Y+16, r25	; 0x10
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	98 89       	ldd	r25, Y+16	; 0x10
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_displayCharacter+0x2d6>
    1da2:	98 8b       	std	Y+16, r25	; 0x10
    1da4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	a0 e8       	ldi	r26, 0x80	; 128
    1db6:	bf e3       	ldi	r27, 0x3F	; 63
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a e7       	ldi	r20, 0x7A	; 122
    1dce:	53 e4       	ldi	r21, 0x43	; 67
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <LCD_displayCharacter+0x39a>
    1e44:	89 e1       	ldi	r24, 0x19	; 25
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <LCD_displayCharacter+0x388>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <LCD_displayCharacter+0x37c>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_displayCharacter+0x3c4>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e94:	e9 96       	adiw	r28, 0x39	; 57
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <LCD_displayString+0x6>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    1eb8:	0e c0       	rjmp	.+28     	; 0x1ed6 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	80 81       	ld	r24, Z
    1ecc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_displayCharacter>
		i++;
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	8f 5f       	subi	r24, 0xFF	; 255
    1ed4:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	80 81       	ld	r24, Z
    1ee8:	88 23       	and	r24, r24
    1eea:	39 f7       	brne	.-50     	; 0x1eba <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <LCD_moveCursor+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <LCD_moveCursor+0x8>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3d 83       	std	Y+5, r19	; 0x05
    1f12:	2c 83       	std	Y+4, r18	; 0x04
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	9d 81       	ldd	r25, Y+5	; 0x05
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	c1 f0       	breq	.+48     	; 0x1f4e <LCD_moveCursor+0x56>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_moveCursor+0x3a>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <LCD_moveCursor+0x50>
    1f30:	19 c0       	rjmp	.+50     	; 0x1f64 <LCD_moveCursor+0x6c>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	69 f0       	breq	.+26     	; 0x1f56 <LCD_moveCursor+0x5e>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <LCD_moveCursor+0x66>
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	89 83       	std	Y+1, r24	; 0x01
    1f4c:	0b c0       	rjmp	.+22     	; 0x1f64 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	80 5c       	subi	r24, 0xC0	; 192
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	07 c0       	rjmp	.+14     	; 0x1f64 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	80 5f       	subi	r24, 0xF0	; 240
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	80 5b       	subi	r24, 0xB0	; 176
    1f62:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	80 68       	ori	r24, 0x80	; 128
    1f68:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <LCD_displayStringRowColumn+0x6>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <LCD_displayStringRowColumn+0x8>
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	6a 83       	std	Y+2, r22	; 0x02
    1f8c:	5c 83       	std	Y+4, r21	; 0x04
    1f8e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	6a 81       	ldd	r22, Y+2	; 0x02
    1f94:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	62 97       	sbiw	r28, 0x12	; 18
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	9a 8b       	std	Y+18, r25	; 0x12
    1fc4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fc6:	89 89       	ldd	r24, Y+17	; 0x11
    1fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fca:	9e 01       	movw	r18, r28
    1fcc:	2f 5f       	subi	r18, 0xFF	; 255
    1fce:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd0:	b9 01       	movw	r22, r18
    1fd2:	4a e0       	ldi	r20, 0x0A	; 10
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	0e 94 1f 14 	call	0x283e	; 0x283e <itoa>
   LCD_displayString(buff); /* Display the string */
    1fda:	ce 01       	movw	r24, r28
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
}
    1fe2:	62 96       	adiw	r28, 0x12	; 18
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	0e 94 75 0b 	call	0x16ea	; 0x16ea <LCD_sendCommand>
}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	60 97       	sbiw	r28, 0x10	; 16
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2026:	82 e0       	ldi	r24, 0x02	; 2
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	62 e0       	ldi	r22, 0x02	; 2
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    203a:	82 e0       	ldi	r24, 0x02	; 2
    203c:	63 e0       	ldi	r22, 0x03	; 3
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2044:	82 e0       	ldi	r24, 0x02	; 2
    2046:	64 e0       	ldi	r22, 0x04	; 4
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    204e:	82 e0       	ldi	r24, 0x02	; 2
    2050:	65 e0       	ldi	r22, 0x05	; 5
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	66 e0       	ldi	r22, 0x06	; 6
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	67 e0       	ldi	r22, 0x07	; 7
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    206c:	1f 86       	std	Y+15, r1	; 0x0f
    206e:	ab c0       	rjmp	.+342    	; 0x21c6 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	6f 85       	ldd	r22, Y+15	; 0x0f
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	6f 85       	ldd	r22, Y+15	; 0x0f
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 86 08 	call	0x110c	; 0x110c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2084:	18 8a       	std	Y+16, r1	; 0x10
    2086:	22 c0       	rjmp	.+68     	; 0x20cc <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2088:	88 89       	ldd	r24, Y+16	; 0x10
    208a:	98 2f       	mov	r25, r24
    208c:	9c 5f       	subi	r25, 0xFC	; 252
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	69 2f       	mov	r22, r25
    2092:	0e 94 71 09 	call	0x12e2	; 0x12e2 <GPIO_readPin>
    2096:	88 23       	and	r24, r24
    2098:	b1 f4       	brne	.+44     	; 0x20c6 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	88 2f       	mov	r24, r24
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	98 2f       	mov	r25, r24
    20aa:	88 89       	ldd	r24, Y+16	; 0x10
    20ac:	89 0f       	add	r24, r25
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    20b4:	60 96       	adiw	r28, 0x10	; 16
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20c6:	88 89       	ldd	r24, Y+16	; 0x10
    20c8:	8f 5f       	subi	r24, 0xFF	; 255
    20ca:	88 8b       	std	Y+16, r24	; 0x10
    20cc:	88 89       	ldd	r24, Y+16	; 0x10
    20ce:	84 30       	cpi	r24, 0x04	; 4
    20d0:	d8 f2       	brcs	.-74     	; 0x2088 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 9b 07 	call	0xf36	; 0xf36 <GPIO_setupPinDirection>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 ea       	ldi	r26, 0xA0	; 160
    20e2:	b0 e4       	ldi	r27, 0x40	; 64
    20e4:	8b 87       	std	Y+11, r24	; 0x0b
    20e6:	9c 87       	std	Y+12, r25	; 0x0c
    20e8:	ad 87       	std	Y+13, r26	; 0x0d
    20ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8f 83       	std	Y+7, r24	; 0x07
    2106:	98 87       	std	Y+8, r25	; 0x08
    2108:	a9 87       	std	Y+9, r26	; 0x09
    210a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	2c f4       	brge	.+10     	; 0x212e <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9e 83       	std	Y+6, r25	; 0x06
    212a:	8d 83       	std	Y+5, r24	; 0x05
    212c:	3f c0       	rjmp	.+126    	; 0x21ac <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	3f ef       	ldi	r19, 0xFF	; 255
    213a:	4f e7       	ldi	r20, 0x7F	; 127
    213c:	57 e4       	ldi	r21, 0x47	; 71
    213e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2142:	18 16       	cp	r1, r24
    2144:	4c f5       	brge	.+82     	; 0x2198 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2146:	6b 85       	ldd	r22, Y+11	; 0x0b
    2148:	7c 85       	ldd	r23, Y+12	; 0x0c
    214a:	8d 85       	ldd	r24, Y+13	; 0x0d
    214c:	9e 85       	ldd	r25, Y+14	; 0x0e
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e2       	ldi	r20, 0x20	; 32
    2154:	51 e4       	ldi	r21, 0x41	; 65
    2156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	bc 01       	movw	r22, r24
    2160:	cd 01       	movw	r24, r26
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
    216e:	0f c0       	rjmp	.+30     	; 0x218e <KEYPAD_getPressedKey+0x186>
    2170:	89 e1       	ldi	r24, 0x19	; 25
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <KEYPAD_getPressedKey+0x174>
    2180:	9c 83       	std	Y+4, r25	; 0x04
    2182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	00 97       	sbiw	r24, 0x00	; 0
    2194:	69 f7       	brne	.-38     	; 0x2170 <KEYPAD_getPressedKey+0x168>
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2198:	6f 81       	ldd	r22, Y+7	; 0x07
    219a:	78 85       	ldd	r23, Y+8	; 0x08
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	8d 81       	ldd	r24, Y+5	; 0x05
    21ae:	9e 81       	ldd	r25, Y+6	; 0x06
    21b0:	9a 83       	std	Y+2, r25	; 0x02
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <KEYPAD_getPressedKey+0x1b0>
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	8f 87       	std	Y+15, r24	; 0x0f
    21c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c8:	84 30       	cpi	r24, 0x04	; 4
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <KEYPAD_getPressedKey+0x1c6>
    21cc:	51 cf       	rjmp	.-350    	; 0x2070 <KEYPAD_getPressedKey+0x68>
    21ce:	4e cf       	rjmp	.-356    	; 0x206c <KEYPAD_getPressedKey+0x64>

000021d0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21de:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	3c 83       	std	Y+4, r19	; 0x04
    21e8:	2b 83       	std	Y+3, r18	; 0x03
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	88 30       	cpi	r24, 0x08	; 8
    21f0:	91 05       	cpc	r25, r1
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    21f4:	70 c0       	rjmp	.+224    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	29 30       	cpi	r18, 0x09	; 9
    21fc:	31 05       	cpc	r19, r1
    21fe:	5c f5       	brge	.+86     	; 0x2256 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	84 30       	cpi	r24, 0x04	; 4
    2206:	91 05       	cpc	r25, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    220a:	59 c0       	rjmp	.+178    	; 0x22be <KEYPAD_4x4_adjustKeyNumber+0xee>
    220c:	2b 81       	ldd	r18, Y+3	; 0x03
    220e:	3c 81       	ldd	r19, Y+4	; 0x04
    2210:	25 30       	cpi	r18, 0x05	; 5
    2212:	31 05       	cpc	r19, r1
    2214:	9c f4       	brge	.+38     	; 0x223c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2220:	48 c0       	rjmp	.+144    	; 0x22b2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2222:	2b 81       	ldd	r18, Y+3	; 0x03
    2224:	3c 81       	ldd	r19, Y+4	; 0x04
    2226:	23 30       	cpi	r18, 0x03	; 3
    2228:	31 05       	cpc	r19, r1
    222a:	0c f0       	brlt	.+2      	; 0x222e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    222c:	45 c0       	rjmp	.+138    	; 0x22b8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	91 05       	cpc	r25, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2238:	39 c0       	rjmp	.+114    	; 0x22ac <KEYPAD_4x4_adjustKeyNumber+0xdc>
    223a:	67 c0       	rjmp	.+206    	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    223c:	2b 81       	ldd	r18, Y+3	; 0x03
    223e:	3c 81       	ldd	r19, Y+4	; 0x04
    2240:	26 30       	cpi	r18, 0x06	; 6
    2242:	31 05       	cpc	r19, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2246:	41 c0       	rjmp	.+130    	; 0x22ca <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	87 30       	cpi	r24, 0x07	; 7
    224e:	91 05       	cpc	r25, r1
    2250:	0c f0       	brlt	.+2      	; 0x2254 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2252:	3e c0       	rjmp	.+124    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2254:	37 c0       	rjmp	.+110    	; 0x22c4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	2c 30       	cpi	r18, 0x0C	; 12
    225c:	31 05       	cpc	r19, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2260:	46 c0       	rjmp	.+140    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	8d 30       	cpi	r24, 0x0D	; 13
    2268:	91 05       	cpc	r25, r1
    226a:	5c f4       	brge	.+22     	; 0x2282 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    226c:	2b 81       	ldd	r18, Y+3	; 0x03
    226e:	3c 81       	ldd	r19, Y+4	; 0x04
    2270:	2a 30       	cpi	r18, 0x0A	; 10
    2272:	31 05       	cpc	r19, r1
    2274:	b1 f1       	breq	.+108    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	8b 30       	cpi	r24, 0x0B	; 11
    227c:	91 05       	cpc	r25, r1
    227e:	a4 f5       	brge	.+104    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2280:	2d c0       	rjmp	.+90     	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2282:	2b 81       	ldd	r18, Y+3	; 0x03
    2284:	3c 81       	ldd	r19, Y+4	; 0x04
    2286:	2e 30       	cpi	r18, 0x0E	; 14
    2288:	31 05       	cpc	r19, r1
    228a:	b9 f1       	breq	.+110    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	8e 30       	cpi	r24, 0x0E	; 14
    2292:	91 05       	cpc	r25, r1
    2294:	7c f1       	brlt	.+94     	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	2f 30       	cpi	r18, 0x0F	; 15
    229c:	31 05       	cpc	r19, r1
    229e:	79 f1       	breq	.+94     	; 0x22fe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	80 31       	cpi	r24, 0x10	; 16
    22a6:	91 05       	cpc	r25, r1
    22a8:	69 f1       	breq	.+90     	; 0x2304 <KEYPAD_4x4_adjustKeyNumber+0x134>
    22aa:	2f c0       	rjmp	.+94     	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    22ac:	87 e0       	ldi	r24, 0x07	; 7
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	2e c0       	rjmp	.+92     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    22b2:	88 e0       	ldi	r24, 0x08	; 8
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	2b c0       	rjmp	.+86     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    22b8:	89 e0       	ldi	r24, 0x09	; 9
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	28 c0       	rjmp	.+80     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    22be:	85 e2       	ldi	r24, 0x25	; 37
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	25 c0       	rjmp	.+74     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    22c4:	84 e0       	ldi	r24, 0x04	; 4
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	22 c0       	rjmp	.+68     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    22ca:	85 e0       	ldi	r24, 0x05	; 5
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	1f c0       	rjmp	.+62     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    22d0:	86 e0       	ldi	r24, 0x06	; 6
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	1c c0       	rjmp	.+56     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    22d6:	8a e2       	ldi	r24, 0x2A	; 42
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	19 c0       	rjmp	.+50     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	16 c0       	rjmp	.+44     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	13 c0       	rjmp	.+38     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	10 c0       	rjmp	.+32     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22ee:	8d e2       	ldi	r24, 0x2D	; 45
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	0d c0       	rjmp	.+26     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    22f4:	8d e0       	ldi	r24, 0x0D	; 13
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	0a c0       	rjmp	.+20     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	08 c0       	rjmp	.+16     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22fe:	8d e3       	ldi	r24, 0x3D	; 61
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	05 c0       	rjmp	.+10     	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2304:	8b e2       	ldi	r24, 0x2B	; 43
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	02 c0       	rjmp	.+4      	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <HMI_ECU_recievePassword>:
 *                         Functions Prototypes                                   *
 *******************************************************************************/
static volatile uint8 key_num;
void HMI_ECU_recievePassword(void);
void HMI_ECU_recievePassword(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	60 97       	sbiw	r28, 0x10	; 16
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for( i = 0 ;i < 5 ; i++ )
    2332:	1f 86       	std	Y+15, r1	; 0x0f
    2334:	8a c0       	rjmp	.+276    	; 0x244a <HMI_ECU_recievePassword+0x12c>
	{
		key_num = KEYPAD_getPressedKey();
    2336:	0e 94 04 10 	call	0x2008	; 0x2008 <KEYPAD_getPressedKey>
    233a:	80 93 01 01 	sts	0x0101, r24
		if( key_num >=0 && key_num <=9)
    233e:	80 91 01 01 	lds	r24, 0x0101
    2342:	80 91 01 01 	lds	r24, 0x0101
    2346:	8a 30       	cpi	r24, 0x0A	; 10
    2348:	40 f4       	brcc	.+16     	; 0x235a <HMI_ECU_recievePassword+0x3c>
		{
			UART_sendByte(key_num);
    234a:	80 91 01 01 	lds	r24, 0x0101
    234e:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_sendByte>
			LCD_displayCharacter('*');
    2352:	8a e2       	ldi	r24, 0x2A	; 42
    2354:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LCD_displayCharacter>
    2358:	03 c0       	rjmp	.+6      	; 0x2360 <HMI_ECU_recievePassword+0x42>
		}
		else
			i--;
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	8f 87       	std	Y+15, r24	; 0x0f
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	aa ef       	ldi	r26, 0xFA	; 250
    2366:	b3 e4       	ldi	r27, 0x43	; 67
    2368:	8b 87       	std	Y+11, r24	; 0x0b
    236a:	9c 87       	std	Y+12, r25	; 0x0c
    236c:	ad 87       	std	Y+13, r26	; 0x0d
    236e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	53 e4       	ldi	r21, 0x43	; 67
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8f 83       	std	Y+7, r24	; 0x07
    238a:	98 87       	std	Y+8, r25	; 0x08
    238c:	a9 87       	std	Y+9, r26	; 0x09
    238e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <HMI_ECU_recievePassword+0x94>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <HMI_ECU_recievePassword+0x112>
	else if (__tmp > 65535)
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <HMI_ECU_recievePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    23cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <HMI_ECU_recievePassword+0xf4>
    23f4:	89 e1       	ldi	r24, 0x19	; 25
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <HMI_ECU_recievePassword+0xe2>
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <HMI_ECU_recievePassword+0xd6>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <HMI_ECU_recievePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <HMI_ECU_recievePassword+0x11e>
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
static volatile uint8 key_num;
void HMI_ECU_recievePassword(void);
void HMI_ECU_recievePassword(void)
{
	uint8 i;
	for( i = 0 ;i < 5 ; i++ )
    2444:	8f 85       	ldd	r24, Y+15	; 0x0f
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	8f 87       	std	Y+15, r24	; 0x0f
    244a:	8f 85       	ldd	r24, Y+15	; 0x0f
    244c:	85 30       	cpi	r24, 0x05	; 5
    244e:	08 f4       	brcc	.+2      	; 0x2452 <HMI_ECU_recievePassword+0x134>
    2450:	72 cf       	rjmp	.-284    	; 0x2336 <HMI_ECU_recievePassword+0x18>
		else
			i--;
		_delay_ms(500);
	}
	return;
}
    2452:	60 96       	adiw	r28, 0x10	; 16
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <timer1>:


static volatile uint8 g_tick;
void timer1(void);
void timer1(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    246c:	80 91 02 01 	lds	r24, 0x0102
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 93 02 01 	sts	0x0102, r24
}
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <main>:
/*******************************************************************************
 *                        Main HMI ECU Functions                           *
 *******************************************************************************/

int main(void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	a5 97       	sbiw	r28, 0x25	; 37
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    2490:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <LCD_init>
	SREG  |= (1<<7);
    2494:	af e5       	ldi	r26, 0x5F	; 95
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	ef e5       	ldi	r30, 0x5F	; 95
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	80 68       	ori	r24, 0x80	; 128
    24a0:	8c 93       	st	X, r24

	UART_ConfigType UART_Config ={BIT_8 ,DISABLED_PARITY ,STOP_ONE_BIT ,9600 };
    24a2:	9e 01       	movw	r18, r28
    24a4:	21 5f       	subi	r18, 0xF1	; 241
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	3d 8f       	std	Y+29, r19	; 0x1d
    24aa:	2c 8f       	std	Y+28, r18	; 0x1c
    24ac:	89 ef       	ldi	r24, 0xF9	; 249
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9f 8f       	std	Y+31, r25	; 0x1f
    24b2:	8e 8f       	std	Y+30, r24	; 0x1e
    24b4:	95 e0       	ldi	r25, 0x05	; 5
    24b6:	98 a3       	std	Y+32, r25	; 0x20
    24b8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    24ba:	ff 8d       	ldd	r31, Y+31	; 0x1f
    24bc:	00 80       	ld	r0, Z
    24be:	2e 8d       	ldd	r18, Y+30	; 0x1e
    24c0:	3f 8d       	ldd	r19, Y+31	; 0x1f
    24c2:	2f 5f       	subi	r18, 0xFF	; 255
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	3f 8f       	std	Y+31, r19	; 0x1f
    24c8:	2e 8f       	std	Y+30, r18	; 0x1e
    24ca:	ec 8d       	ldd	r30, Y+28	; 0x1c
    24cc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    24ce:	00 82       	st	Z, r0
    24d0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    24d2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	3d 8f       	std	Y+29, r19	; 0x1d
    24da:	2c 8f       	std	Y+28, r18	; 0x1c
    24dc:	38 a1       	ldd	r19, Y+32	; 0x20
    24de:	31 50       	subi	r19, 0x01	; 1
    24e0:	38 a3       	std	Y+32, r19	; 0x20
    24e2:	88 a1       	ldd	r24, Y+32	; 0x20
    24e4:	88 23       	and	r24, r24
    24e6:	41 f7       	brne	.-48     	; 0x24b8 <main+0x3c>
	UART_init( &UART_Config );
    24e8:	ce 01       	movw	r24, r28
    24ea:	0f 96       	adiw	r24, 0x0f	; 15
    24ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	Timer1_ConfigType Timer1_Config ={ 0,1000 ,F_CPU_1024,CompareMode};
    24f0:	fe 01       	movw	r30, r28
    24f2:	74 96       	adiw	r30, 0x14	; 20
    24f4:	fa a3       	std	Y+34, r31	; 0x22
    24f6:	e9 a3       	std	Y+33, r30	; 0x21
    24f8:	23 ef       	ldi	r18, 0xF3	; 243
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	3c a3       	std	Y+36, r19	; 0x24
    24fe:	2b a3       	std	Y+35, r18	; 0x23
    2500:	36 e0       	ldi	r19, 0x06	; 6
    2502:	3d a3       	std	Y+37, r19	; 0x25
    2504:	eb a1       	ldd	r30, Y+35	; 0x23
    2506:	fc a1       	ldd	r31, Y+36	; 0x24
    2508:	00 80       	ld	r0, Z
    250a:	2b a1       	ldd	r18, Y+35	; 0x23
    250c:	3c a1       	ldd	r19, Y+36	; 0x24
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	3c a3       	std	Y+36, r19	; 0x24
    2514:	2b a3       	std	Y+35, r18	; 0x23
    2516:	e9 a1       	ldd	r30, Y+33	; 0x21
    2518:	fa a1       	ldd	r31, Y+34	; 0x22
    251a:	00 82       	st	Z, r0
    251c:	29 a1       	ldd	r18, Y+33	; 0x21
    251e:	3a a1       	ldd	r19, Y+34	; 0x22
    2520:	2f 5f       	subi	r18, 0xFF	; 255
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	3a a3       	std	Y+34, r19	; 0x22
    2526:	29 a3       	std	Y+33, r18	; 0x21
    2528:	3d a1       	ldd	r19, Y+37	; 0x25
    252a:	31 50       	subi	r19, 0x01	; 1
    252c:	3d a3       	std	Y+37, r19	; 0x25
    252e:	8d a1       	ldd	r24, Y+37	; 0x25
    2530:	88 23       	and	r24, r24
    2532:	41 f7       	brne	.-48     	; 0x2504 <main+0x88>
	Timer1_setCallBack(timer1);
    2534:	82 e3       	ldi	r24, 0x32	; 50
    2536:	92 e1       	ldi	r25, 0x12	; 18
    2538:	0e 94 89 07 	call	0xf12	; 0xf12 <Timer1_setCallBack>

	UART_sendByte(READY_HMI_ECU);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_sendByte>
	static uint8 check;
	while(1)
	{
		check= UART_recieveByte();
    2542:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
    2546:	80 93 00 01 	sts	0x0100, r24
		switch(check)
    254a:	80 91 00 01 	lds	r24, 0x0100
    254e:	e8 2f       	mov	r30, r24
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	fb 8f       	std	Y+27, r31	; 0x1b
    2554:	ea 8f       	std	Y+26, r30	; 0x1a
    2556:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2558:	3b 8d       	ldd	r19, Y+27	; 0x1b
    255a:	24 30       	cpi	r18, 0x04	; 4
    255c:	31 05       	cpc	r19, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <main+0xe6>
    2560:	d6 c0       	rjmp	.+428    	; 0x270e <main+0x292>
    2562:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2564:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2566:	85 30       	cpi	r24, 0x05	; 5
    2568:	91 05       	cpc	r25, r1
    256a:	5c f4       	brge	.+22     	; 0x2582 <main+0x106>
    256c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    256e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2570:	e2 30       	cpi	r30, 0x02	; 2
    2572:	f1 05       	cpc	r31, r1
    2574:	c1 f0       	breq	.+48     	; 0x25a6 <main+0x12a>
    2576:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2578:	3b 8d       	ldd	r19, Y+27	; 0x1b
    257a:	23 30       	cpi	r18, 0x03	; 3
    257c:	31 05       	cpc	r19, r1
    257e:	21 f1       	breq	.+72     	; 0x25c8 <main+0x14c>
    2580:	e0 cf       	rjmp	.-64     	; 0x2542 <main+0xc6>
    2582:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2584:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2586:	86 30       	cpi	r24, 0x06	; 6
    2588:	91 05       	cpc	r25, r1
    258a:	09 f4       	brne	.+2      	; 0x258e <main+0x112>
    258c:	ea c0       	rjmp	.+468    	; 0x2762 <main+0x2e6>
    258e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2590:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2592:	e6 30       	cpi	r30, 0x06	; 6
    2594:	f1 05       	cpc	r31, r1
    2596:	0c f4       	brge	.+2      	; 0x259a <main+0x11e>
    2598:	cf c0       	rjmp	.+414    	; 0x2738 <main+0x2bc>
    259a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    259c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    259e:	27 30       	cpi	r18, 0x07	; 7
    25a0:	31 05       	cpc	r19, r1
    25a2:	39 f1       	breq	.+78     	; 0x25f2 <main+0x176>
    25a4:	ce cf       	rjmp	.-100    	; 0x2542 <main+0xc6>
		{
		case ENTER_NEW_PASSWORD:
			while(UART_recieveByte() != READY_HMI_ECU);
    25a6:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
    25aa:	88 23       	and	r24, r24
    25ac:	e1 f7       	brne	.-8      	; 0x25a6 <main+0x12a>
			LCD_clearScreen();
    25ae:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("plz enter pass:");
    25b2:	80 e6       	ldi	r24, 0x60	; 96
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			LCD_moveCursor(1,0);
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	60 e0       	ldi	r22, 0x00	; 0
    25be:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_moveCursor>
			HMI_ECU_recievePassword();
    25c2:	0e 94 8f 11 	call	0x231e	; 0x231e <HMI_ECU_recievePassword>
    25c6:	bd cf       	rjmp	.-134    	; 0x2542 <main+0xc6>
			break;

		case RE_ENTER_NEW_PASSWORD:
			while(UART_recieveByte() != READY_HMI_ECU);
    25c8:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
    25cc:	88 23       	and	r24, r24
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <main+0x14c>
			LCD_clearScreen();
    25d0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("plz re-enter the");
    25d4:	80 e7       	ldi	r24, 0x70	; 112
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			LCD_moveCursor(1,0);
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	60 e0       	ldi	r22, 0x00	; 0
    25e0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <LCD_moveCursor>
			LCD_displayString("same pass: ");
    25e4:	81 e8       	ldi	r24, 0x81	; 129
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			HMI_ECU_recievePassword();
    25ec:	0e 94 8f 11 	call	0x231e	; 0x231e <HMI_ECU_recievePassword>
    25f0:	a8 cf       	rjmp	.-176    	; 0x2542 <main+0xc6>
			break;

		case MAIN_OPTIONS:
			LCD_clearScreen();
    25f2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("Matched Pass");
    25f6:	8d e8       	ldi	r24, 0x8D	; 141
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	aa e7       	ldi	r26, 0x7A	; 122
    2604:	b4 e4       	ldi	r27, 0x44	; 68
    2606:	8b 87       	std	Y+11, r24	; 0x0b
    2608:	9c 87       	std	Y+12, r25	; 0x0c
    260a:	ad 87       	std	Y+13, r26	; 0x0d
    260c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2610:	7c 85       	ldd	r23, Y+12	; 0x0c
    2612:	8d 85       	ldd	r24, Y+13	; 0x0d
    2614:	9e 85       	ldd	r25, Y+14	; 0x0e
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	53 e4       	ldi	r21, 0x43	; 67
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8f 83       	std	Y+7, r24	; 0x07
    2628:	98 87       	std	Y+8, r25	; 0x08
    262a:	a9 87       	std	Y+9, r26	; 0x09
    262c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <main+0x1d4>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <main+0x252>
	else if (__tmp > 65535)
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	6b 85       	ldd	r22, Y+11	; 0x0b
    266a:	7c 85       	ldd	r23, Y+12	; 0x0c
    266c:	8d 85       	ldd	r24, Y+13	; 0x0d
    266e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <main+0x234>
    2692:	89 e1       	ldi	r24, 0x19	; 25
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <main+0x222>
    26a2:	9c 83       	std	Y+4, r25	; 0x04
    26a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8d 81       	ldd	r24, Y+5	; 0x05
    26a8:	9e 81       	ldd	r25, Y+6	; 0x06
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <main+0x216>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	8d 81       	ldd	r24, Y+5	; 0x05
    26d0:	9e 81       	ldd	r25, Y+6	; 0x06
    26d2:	9a 83       	std	Y+2, r25	; 0x02
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <main+0x25e>
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			LCD_clearScreen();
    26e2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    26e6:	8a e9       	ldi	r24, 0x9A	; 154
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
    26ee:	28 ea       	ldi	r18, 0xA8	; 168
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	a9 01       	movw	r20, r18
    26f8:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_displayStringRowColumn>

			while(UART_recieveByte() != READY_HMI_ECU);
    26fc:	0e 94 3c 06 	call	0xc78	; 0xc78 <UART_recieveByte>
    2700:	88 23       	and	r24, r24
    2702:	e1 f7       	brne	.-8      	; 0x26fc <main+0x280>
			UART_sendByte( KEYPAD_getPressedKey() );
    2704:	0e 94 04 10 	call	0x2008	; 0x2008 <KEYPAD_getPressedKey>
    2708:	0e 94 25 06 	call	0xc4a	; 0xc4a <UART_sendByte>
    270c:	1a cf       	rjmp	.-460    	; 0x2542 <main+0xc6>
			break;

		case OPEN_DOOR:
			LCD_clearScreen();
    270e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("Door is Unlocking");
    2712:	88 eb       	ldi	r24, 0xB8	; 184
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			Timer1_init(&Timer1_Config);
    271a:	ce 01       	movw	r24, r28
    271c:	44 96       	adiw	r24, 0x14	; 20
    271e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Timer1_init>
			while(g_tick < 15);
    2722:	80 91 02 01 	lds	r24, 0x0102
    2726:	8f 30       	cpi	r24, 0x0F	; 15
    2728:	e0 f3       	brcs	.-8      	; 0x2722 <main+0x2a6>

			Timer1_deInit();
    272a:	0e 94 74 07 	call	0xee8	; 0xee8 <Timer1_deInit>
			g_tick =0;
    272e:	10 92 02 01 	sts	0x0102, r1
			LCD_clearScreen();
    2732:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
    2736:	05 cf       	rjmp	.-502    	; 0x2542 <main+0xc6>
			break;

		case CLOSE_DOOR:
			LCD_clearScreen();
    2738:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("Door is locking");
    273c:	8a ec       	ldi	r24, 0xCA	; 202
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			Timer1_init(&Timer1_Config);
    2744:	ce 01       	movw	r24, r28
    2746:	44 96       	adiw	r24, 0x14	; 20
    2748:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Timer1_init>
			while(g_tick < 15);
    274c:	80 91 02 01 	lds	r24, 0x0102
    2750:	8f 30       	cpi	r24, 0x0F	; 15
    2752:	e0 f3       	brcs	.-8      	; 0x274c <main+0x2d0>

			Timer1_deInit();
    2754:	0e 94 74 07 	call	0xee8	; 0xee8 <Timer1_deInit>
			g_tick =0;
    2758:	10 92 02 01 	sts	0x0102, r1
			LCD_clearScreen();
    275c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
    2760:	f0 ce       	rjmp	.-544    	; 0x2542 <main+0xc6>
			break;

		case BUZZER_ON:
			LCD_clearScreen();
    2762:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
			LCD_displayString("Pass not matched");
    2766:	8a ed       	ldi	r24, 0xDA	; 218
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_displayString>
			Timer1_init(&Timer1_Config);
    276e:	ce 01       	movw	r24, r28
    2770:	44 96       	adiw	r24, 0x14	; 20
    2772:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Timer1_init>
			while(g_tick < 60);
    2776:	80 91 02 01 	lds	r24, 0x0102
    277a:	8c 33       	cpi	r24, 0x3C	; 60
    277c:	e0 f3       	brcs	.-8      	; 0x2776 <main+0x2fa>

			Timer1_deInit();
    277e:	0e 94 74 07 	call	0xee8	; 0xee8 <Timer1_deInit>
			g_tick =0;
    2782:	10 92 02 01 	sts	0x0102, r1
			LCD_clearScreen();
    2786:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_clearScreen>
    278a:	db ce       	rjmp	.-586    	; 0x2542 <main+0xc6>

0000278c <__udivmodsi4>:
    278c:	a1 e2       	ldi	r26, 0x21	; 33
    278e:	1a 2e       	mov	r1, r26
    2790:	aa 1b       	sub	r26, r26
    2792:	bb 1b       	sub	r27, r27
    2794:	fd 01       	movw	r30, r26
    2796:	0d c0       	rjmp	.+26     	; 0x27b2 <__udivmodsi4_ep>

00002798 <__udivmodsi4_loop>:
    2798:	aa 1f       	adc	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	ee 1f       	adc	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	a2 17       	cp	r26, r18
    27a2:	b3 07       	cpc	r27, r19
    27a4:	e4 07       	cpc	r30, r20
    27a6:	f5 07       	cpc	r31, r21
    27a8:	20 f0       	brcs	.+8      	; 0x27b2 <__udivmodsi4_ep>
    27aa:	a2 1b       	sub	r26, r18
    27ac:	b3 0b       	sbc	r27, r19
    27ae:	e4 0b       	sbc	r30, r20
    27b0:	f5 0b       	sbc	r31, r21

000027b2 <__udivmodsi4_ep>:
    27b2:	66 1f       	adc	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	1a 94       	dec	r1
    27bc:	69 f7       	brne	.-38     	; 0x2798 <__udivmodsi4_loop>
    27be:	60 95       	com	r22
    27c0:	70 95       	com	r23
    27c2:	80 95       	com	r24
    27c4:	90 95       	com	r25
    27c6:	9b 01       	movw	r18, r22
    27c8:	ac 01       	movw	r20, r24
    27ca:	bd 01       	movw	r22, r26
    27cc:	cf 01       	movw	r24, r30
    27ce:	08 95       	ret

000027d0 <__prologue_saves__>:
    27d0:	2f 92       	push	r2
    27d2:	3f 92       	push	r3
    27d4:	4f 92       	push	r4
    27d6:	5f 92       	push	r5
    27d8:	6f 92       	push	r6
    27da:	7f 92       	push	r7
    27dc:	8f 92       	push	r8
    27de:	9f 92       	push	r9
    27e0:	af 92       	push	r10
    27e2:	bf 92       	push	r11
    27e4:	cf 92       	push	r12
    27e6:	df 92       	push	r13
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
    27f0:	cf 93       	push	r28
    27f2:	df 93       	push	r29
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	ca 1b       	sub	r28, r26
    27fa:	db 0b       	sbc	r29, r27
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	09 94       	ijmp

00002808 <__epilogue_restores__>:
    2808:	2a 88       	ldd	r2, Y+18	; 0x12
    280a:	39 88       	ldd	r3, Y+17	; 0x11
    280c:	48 88       	ldd	r4, Y+16	; 0x10
    280e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2810:	6e 84       	ldd	r6, Y+14	; 0x0e
    2812:	7d 84       	ldd	r7, Y+13	; 0x0d
    2814:	8c 84       	ldd	r8, Y+12	; 0x0c
    2816:	9b 84       	ldd	r9, Y+11	; 0x0b
    2818:	aa 84       	ldd	r10, Y+10	; 0x0a
    281a:	b9 84       	ldd	r11, Y+9	; 0x09
    281c:	c8 84       	ldd	r12, Y+8	; 0x08
    281e:	df 80       	ldd	r13, Y+7	; 0x07
    2820:	ee 80       	ldd	r14, Y+6	; 0x06
    2822:	fd 80       	ldd	r15, Y+5	; 0x05
    2824:	0c 81       	ldd	r16, Y+4	; 0x04
    2826:	1b 81       	ldd	r17, Y+3	; 0x03
    2828:	aa 81       	ldd	r26, Y+2	; 0x02
    282a:	b9 81       	ldd	r27, Y+1	; 0x01
    282c:	ce 0f       	add	r28, r30
    282e:	d1 1d       	adc	r29, r1
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	ed 01       	movw	r28, r26
    283c:	08 95       	ret

0000283e <itoa>:
    283e:	fb 01       	movw	r30, r22
    2840:	9f 01       	movw	r18, r30
    2842:	e8 94       	clt
    2844:	42 30       	cpi	r20, 0x02	; 2
    2846:	c4 f0       	brlt	.+48     	; 0x2878 <itoa+0x3a>
    2848:	45 32       	cpi	r20, 0x25	; 37
    284a:	b4 f4       	brge	.+44     	; 0x2878 <itoa+0x3a>
    284c:	4a 30       	cpi	r20, 0x0A	; 10
    284e:	29 f4       	brne	.+10     	; 0x285a <itoa+0x1c>
    2850:	97 fb       	bst	r25, 7
    2852:	1e f4       	brtc	.+6      	; 0x285a <itoa+0x1c>
    2854:	90 95       	com	r25
    2856:	81 95       	neg	r24
    2858:	9f 4f       	sbci	r25, 0xFF	; 255
    285a:	64 2f       	mov	r22, r20
    285c:	77 27       	eor	r23, r23
    285e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodhi4>
    2862:	80 5d       	subi	r24, 0xD0	; 208
    2864:	8a 33       	cpi	r24, 0x3A	; 58
    2866:	0c f0       	brlt	.+2      	; 0x286a <itoa+0x2c>
    2868:	89 5d       	subi	r24, 0xD9	; 217
    286a:	81 93       	st	Z+, r24
    286c:	cb 01       	movw	r24, r22
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	a1 f7       	brne	.-24     	; 0x285a <itoa+0x1c>
    2872:	16 f4       	brtc	.+4      	; 0x2878 <itoa+0x3a>
    2874:	5d e2       	ldi	r21, 0x2D	; 45
    2876:	51 93       	st	Z+, r21
    2878:	10 82       	st	Z, r1
    287a:	c9 01       	movw	r24, r18
    287c:	0c 94 40 14 	jmp	0x2880	; 0x2880 <strrev>

00002880 <strrev>:
    2880:	dc 01       	movw	r26, r24
    2882:	fc 01       	movw	r30, r24
    2884:	67 2f       	mov	r22, r23
    2886:	71 91       	ld	r23, Z+
    2888:	77 23       	and	r23, r23
    288a:	e1 f7       	brne	.-8      	; 0x2884 <strrev+0x4>
    288c:	32 97       	sbiw	r30, 0x02	; 2
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <strrev+0x18>
    2890:	7c 91       	ld	r23, X
    2892:	6d 93       	st	X+, r22
    2894:	70 83       	st	Z, r23
    2896:	62 91       	ld	r22, -Z
    2898:	ae 17       	cp	r26, r30
    289a:	bf 07       	cpc	r27, r31
    289c:	c8 f3       	brcs	.-14     	; 0x2890 <strrev+0x10>
    289e:	08 95       	ret

000028a0 <__udivmodhi4>:
    28a0:	aa 1b       	sub	r26, r26
    28a2:	bb 1b       	sub	r27, r27
    28a4:	51 e1       	ldi	r21, 0x11	; 17
    28a6:	07 c0       	rjmp	.+14     	; 0x28b6 <__udivmodhi4_ep>

000028a8 <__udivmodhi4_loop>:
    28a8:	aa 1f       	adc	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	a6 17       	cp	r26, r22
    28ae:	b7 07       	cpc	r27, r23
    28b0:	10 f0       	brcs	.+4      	; 0x28b6 <__udivmodhi4_ep>
    28b2:	a6 1b       	sub	r26, r22
    28b4:	b7 0b       	sbc	r27, r23

000028b6 <__udivmodhi4_ep>:
    28b6:	88 1f       	adc	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	5a 95       	dec	r21
    28bc:	a9 f7       	brne	.-22     	; 0x28a8 <__udivmodhi4_loop>
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	08 95       	ret

000028c8 <_exit>:
    28c8:	f8 94       	cli

000028ca <__stop_program>:
    28ca:	ff cf       	rjmp	.-2      	; 0x28ca <__stop_program>
